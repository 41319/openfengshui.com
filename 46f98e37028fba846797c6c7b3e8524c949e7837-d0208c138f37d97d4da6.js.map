{"version":3,"sources":["webpack:///./src/cm-lib/QiMen/index.js","webpack:///./node_modules/date-fns/esm/addHours/index.js"],"names":["CalenderData","require","isDivineLightDay","sector","monthChart","dayChart","sectorIndex","DIRECTION","findIndex","e","door","god","isDivineBlessingDay","isDivineForceDay","searchHourChart","startDate","endDate","searchFormation","result","found","Ju","filter","v","chart","find","g","f","indexOf","map","structure","hour","ju","getZhiRunHourChart","push","dirtyDate","dirtyAmount","requiredArgs","arguments","amount","toInteger","addMilliseconds","addHours","dt","bazi","dateObjectToBazi","yearMonthKey","format","dayOfMonth","GanZhiHour","ganzhi","chiefPalace","originalStarPalace","STAR","profile","dayStem","GanZhiDay","substring","hourStem","divineBless","findDivineBlessing","palace","divineLight","findDivineLight","divineForce","findDivineForce","isoString","toISOString","p","title","label","description","element","red","getColor","word","Object","keys","colorCode","includes","getDayChartByDate","date","getDayChart","getFullYear","getMonth","getDate","year","month","day","n","lookup","9","1","3","7","6","4","gregorianToBazi","start","startJu","solarTerm","chartType","index","SIXTY_PILLAR","Number","pillar","findChiefPalace","findSymbol","star","key","symbol","getMonthChartByDate","getMonthChart","lookupChart","slice","GanZhiYear","i","GanZhiMonth"],"mappings":"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","file":"46f98e37028fba846797c6c7b3e8524c949e7837-d0208c138f37d97d4da6.js","sourcesContent":["import { format } from 'date-fns';\nimport { gregorianToBazi, dateObjectToBazi } from '../FourPillar'\nimport { SIXTY_PILLAR, DIRECTION, QM_SAN_YUAN, SIXTY_FOUR, TRIGRAM_BINARY, STAR, DOOR } from '../constants'\nimport Ju from '../reference/Ju.json'\nimport { addHours } from 'date-fns';\nconst CalenderData = require('./Calendar.json');\n\nexport const isDivineLightDay = (sector, monthChart, dayChart) => {\n    const sectorIndex = DIRECTION.findIndex(e => e === sector)\n    return (monthChart[sectorIndex].door === '生' && dayChart[sectorIndex].god === '天') ||\n    (monthChart[sectorIndex].god === '天' && dayChart[sectorIndex].door === '生')\n}\n\nexport const isDivineBlessingDay = (sector, monthChart, dayChart) => {\n    const sectorIndex = DIRECTION.findIndex(e => e === sector)\n    return (monthChart[sectorIndex].door === '生' && dayChart[sectorIndex].god === '符') ||\n    (monthChart[sectorIndex].god === '符' && dayChart[sectorIndex].door === '生')\n}\n\nexport const isDivineForceDay = (sector, monthChart, dayChart) => {\n    const sectorIndex = DIRECTION.findIndex(e => e === sector)\n    return (monthChart[sectorIndex].god === '天' && dayChart[sectorIndex].god === '符') ||\n    (monthChart[sectorIndex].god === '符' && dayChart[sectorIndex].god === '天')\n}\n\n\nexport const searchHourChart = (startDate, endDate, searchFormation) => {\n\n    const result = []\n    const found = Ju.filter(v => v.chart.find(g => searchFormation && g.f && g.f.indexOf(searchFormation) > -1 ))\n    .map(e => ({ structure: e.structure, hour: e.hour }))\n\n    while(startDate < endDate) {\n        const ju = getZhiRunHourChart(startDate);\n\n        if(found.find(e => ju.ju.structure === e.structure && ju.ju.hour === e.hour)) {\n\n            result.push(startDate)\n        }\n        startDate = addHours(startDate, 2)\n    }\n    return result;\n}\n\nexport const getZhiRunHourChart = dt => {\n    const bazi = dateObjectToBazi(dt);\n    const yearMonthKey = format(dt, 'yyyyMM')\n    const dayOfMonth = format(dt, 'd')\n    const structure = CalenderData[yearMonthKey][dayOfMonth - 1];\n    const ju = Ju.find(e => e.structure === structure && e.hour === bazi.GanZhiHour.ganzhi);\n    \n    const chiefPalace = ju.chart.findIndex(e => e.god === '符');\n    const originalStarPalace = STAR[chiefPalace > 4 ? chiefPalace - 1 : chiefPalace]\n    const profile = {\n        dayStem: bazi.GanZhiDay.ganzhi.substring(0, 1),\n        hourStem: bazi.GanZhiHour.ganzhi.substring(0, 1),\n        divineBless: findDivineBlessing(ju.chart).palace,\n        divineLight: findDivineLight(ju.chart, originalStarPalace).palace,\n        divineForce: findDivineForce(ju.chart).palace\n    }\n    return {\n        ju: {\n            ...ju,\n            isoString: dt.toISOString(),\n            bazi\n        },\n        p: profile,\n        profile: [\n            {\n                title: 'Day Stem',\n                \n                label: profile.dayStem\n            },\n            {\n                title: 'Hour Stem',\n                label: profile.hourStem\n            },\n            {\n                title: 'Divine Blessing',\n                label: profile.divineBless,\n                description: 'Initate Project',\n            },\n            {\n                title: 'Divine Light',\n                description: 'Self Improvement',\n                label: profile.divineLight\n            },\n            {\n                title: 'Divine Force',\n                description: 'Negotiation',\n                label: profile.divineForce\n            },\n        ]\n    }\n}\n\nexport const getChaiBuHour = (bazi) => {\n    const chart = getQMCBChart(bazi);\n    const type = Object.keys(QM_SAN_YUAN).findIndex(e => e === bazi.solarTerm) < 12 ? 'M' : 'F';\n    return {\n        pillar: bazi.GanZhiHour.ganzhi,\n        structure: `${type}${chart.substr(1, 1)}`\n    }\n}\n\nexport const getQMCBChart = (bazi) => {\n    const branchYuan = [\n        ['子', '卯', '午', '酉'],\n        ['寅', '巳', '申', '亥'],\n        ['丑', '辰', '未', '戌']\n    ]\n\n    const reverseSixty = [...SIXTY_PILLAR.slice().reverse(), ...SIXTY_PILLAR.slice().reverse()];\n    const rest = reverseSixty.slice(reverseSixty.findIndex(e => e === bazi.GanZhiDay.ganzhi));\n\n    const fuTouBranch = rest.find(e => ['己', '甲'].includes(e.substr(0, 1))).substr(1, 1)\n    const yuan = branchYuan.findIndex(e => e.includes(fuTouBranch));\n    const type = Object.keys(QM_SAN_YUAN).findIndex(e => e === bazi.solarTerm) < 12 ? 'M' : 'F';\n    \n    return `${type}${QM_SAN_YUAN[bazi.solarTerm][yuan]}`;\n}\n\nconst getQMChart = (y, m, d, h) => {\n    const calDate = new Date(y, m - 1, d);\n    const yearMonthKey = format(calDate, 'yyyyMM');\n    const dayIndex = Number(format(calDate, 'd')) - 1;\n    return {\n        pillar: h,\n        structure: CalenderData[yearMonthKey] && CalenderData[yearMonthKey][dayIndex]\n    }\n}\n\nexport const getZRQMHourChart = (y, m, d, h) => {\n    return getHourChart(gregorianToBazi(y, m, d, h))\n}\n\nexport const getHourChart = (bazi) => {\n    return getQMChart(bazi.westernYear, bazi.westernMonth, bazi.westernDay, bazi.GanZhiHour.ganzhi);\n}\n\nexport const searchChart = (filterObject, haystack) => {\n    return haystack.filter(v => {\n        const kk =  v.chart.map((obj, i) => {\n            const compare = filterObject[i];\n            const l = Object.keys(compare).map(k => {\n                const o = compare[k];\n                return o === '' ? true : o.indexOf(obj[k]) > -1 ? true : false; \n            })\n            return l.every(e => e);\n        })\n        return kk.every(e => e);\n    }).map(e => ({ structure: e.structure, hour: e.hour }))\n}\n\n\nconst element = {\n    red: ['丁', '丙', '景', '英', '巳', '午', '離'],\n    '#00739D': ['壬', '癸', '休', '蓬', '子', '亥', '坎'],\n    '#145A32': ['乙', '杜', '傷', '辅', '沖', '輔', '寅', '卯', '震', '巽', '甲'],\n    \"#A2423D\": ['死', '生', '芮', '任', '戊', '己', '丑', '辰', '未', '戌', '艮', '坤'],\n    '#777777': ['庚', '辛', '开', '柱', '心', '驚', '開', '申', '酉', '乾', '兌'],\n}\n\nexport const getColor = word => {\n    const color = Object.keys(element);\n    return color.find(colorCode => element[colorCode].includes(word));\n}\n\nexport const getDayChartByDate = date => {\n    return getDayChart(date.getFullYear(), date.getMonth() + 1, date.getDate())\n}\n\nexport const getDayChart = (year, month, day) => {\n    const lookup = {\n        9: [\"夏至\", \"小暑\", \"大暑\", \"立秋\"],\n        1: [\"冬至\", \"小寒\", \"大寒\", \"立春\"],\n        3: [\"处暑\", \"白露\", \"秋分\", \"寒露\"],\n        7: [\"雨水\", \"惊蛰\", \"春分\", \"清明\"],\n        6: [\"霜降\", \"立冬\", \"小雪\", \"大雪\"],\n        4: [\"谷雨\", \"立夏\", \"小满\", \"芒种\"],\n    }\n    const removeSign = n => n < 0 ? n * -1 : n;\n    const bazi = gregorianToBazi(year, month, day, 12);\n    const start = Object.keys(lookup).find(startJu => lookup[startJu].includes(bazi.solarTerm));\n    const chartType = [\"1\", \"7\", \"4\"].includes(start) ? 'M' : 'F';\n    const index = SIXTY_PILLAR.indexOf(bazi.GanZhiDay.ganzhi);\n    const chart =  chartType === 'M' ? ((index - 1) + Number(start)) % 9 : removeSign((start) - Number(index)) % 9\n    const structure = chartType === 'M' ? `${chartType}${chart + 1}` : `${chartType}${9 - chart}`;\n    return  { structure, pillar: bazi.GanZhiDay.ganzhi }\n}\n\nexport const matchCriteria = (chart1, chart2, palaceIndex, contains) => {\n    \n    return contains.filter(e => [\n        chart1[palaceIndex].god,\n        chart1[palaceIndex].door,\n        chart1[palaceIndex].star,\n        chart2[palaceIndex].god,\n        chart2[palaceIndex].door,\n        chart2[palaceIndex].star\n    ].includes(e)).length === contains.length\n    \n\n}\n\nexport const findChiefPalace = (chart) => findSymbol(chart, 'god', '符')\n\nexport const findDivineBlessing = chart => findSymbol(chart, 'god', '天')\n\nexport const findDivineLight = (chart, star) => findSymbol(chart, 'star', star)\n\nexport const findDivineForce = chart => findSymbol(chart, 'door', '生')\n\nexport const findSymbol = (chart, key, word) => {\n    return { palace: DIRECTION[chart.findIndex(e => e[key] === word)], symbol: word }\n}\n\nexport const starDoorToHexagram = (star, door) => {\n    const doorBinaryIndex = DOOR.findIndex(e => e === door);\n    const starBinaryIndex = STAR.findIndex(e => e === star);\n\n    const hexBinary = TRIGRAM_BINARY[doorBinaryIndex] + TRIGRAM_BINARY[starBinaryIndex];\n    return SIXTY_FOUR[hexBinary]\n}\n\nexport const getMonthChartByDate = date => {\n    return getMonthChart(date.getFullYear(), date.getMonth() + 1, date.getDate())\n}\n\nexport const lookupChart = (structure, hour) => {\n    return Ju.find(e => e.structure === structure && e.hour === hour)\n}\n\n\nexport const getMonthChart = (year, month, day) => {\n    const yin = [1, 4, 7];\n    const bazi = gregorianToBazi(year, month, day, 12);\n\n\n    const lookup = [\n        ...SIXTY_PILLAR.slice(0, 5),\n        ...SIXTY_PILLAR.slice(15, 20),\n        ...SIXTY_PILLAR.slice(30, 35),\n        ...SIXTY_PILLAR.slice(45, 50),\n\n        ...SIXTY_PILLAR.slice(5, 10),\n        ...SIXTY_PILLAR.slice(20, 25),\n        ...SIXTY_PILLAR.slice(35, 40),\n        ...SIXTY_PILLAR.slice(50, 55),\n        \n        ...SIXTY_PILLAR.slice(10, 15),\n        ...SIXTY_PILLAR.slice(25, 30),\n        ...SIXTY_PILLAR.slice(40, 45),\n        ...SIXTY_PILLAR.slice(55, 60),\n    ];\n\n    const index = lookup.indexOf(bazi.GanZhiYear.ganzhi);\n    const ju = yin.find((ju, i) => (i * 20 - 1) < index && index < ((i + 1) * 20));\n    const structure = `F${ju}`\n    return { structure, pillar: bazi.GanZhiMonth.ganzhi}\n}\n\nexport const getSanYuanYearChart = date => {\n    const year1928Structure = 9;\n\n    const bazi = gregorianToBazi(date.getFullYear(),date.getMonth() + 1, date.getDate(), date.getHours());\n    const toYear = [\"小寒\", \"大寒\"].includes(bazi.solarTerm) ? date.getFullYear() - 1: date.getFullYear();\n    const newStructure = year1928Structure - ((toYear - 1928) % 9);\n    return {\n        pillar: bazi.GanZhiYear.ganzhi,\n        structure: `F${newStructure}`,\n    };\n}\n\n\n\n\n\n","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * var result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\n\nexport default function addHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);\n}"],"sourceRoot":""}