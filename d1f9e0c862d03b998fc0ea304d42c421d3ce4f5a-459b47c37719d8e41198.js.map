{"version":3,"sources":["webpack:///./src/cm-lib/QiMen/index.js"],"names":["getDayChart","require","red","blue","year","month","day","n","lookup","9","1","3","7","6","4","bazi","gregorianToBazi","start","Object","keys","find","startJu","includes","solarTerm","chartType","index","SIXTY_PILLAR","indexOf","GanZhiDay","ganzhi","chart","Number","structure","pillar","getMonthChart","slice","GanZhiYear","ju","i","GanZhiMonth"],"mappings":"yxuQAgFaA,GA3EQC,EAAQ,SA8DhB,GACTC,IAAK,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACpCC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,OACpC,WAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAHvD,EAIR,WAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAJ5D,OAKC,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAQtC,SAACC,EAAMC,EAAOC,GACrC,IAQmBC,EARbC,EAAS,CACXC,EAAG,CAAC,KAAM,KAAM,KAAM,MACtBC,EAAG,CAAC,KAAM,KAAM,KAAM,MACtBC,EAAG,CAAC,KAAM,KAAM,KAAM,MACtBC,EAAG,CAAC,KAAM,KAAM,KAAM,MACtBC,EAAG,CAAC,KAAM,KAAM,KAAM,MACtBC,EAAG,CAAC,KAAM,KAAM,KAAM,OAGpBC,EAAOC,YAAgBZ,EAAMC,EAAOC,EAAK,IACzCW,EAAQC,OAAOC,KAAKX,GAAQY,MAAK,SAAAC,GAAO,OAAIb,EAAOa,GAASC,SAASP,EAAKQ,cAC1EC,EAAY,CAAC,IAAK,IAAK,KAAKF,SAASL,GAAS,IAAM,IACpDQ,EAAQC,IAAaC,QAAQZ,EAAKa,UAAUC,QAC5CC,EAAuB,MAAdN,GAAsBC,EAAQ,EAAKM,OAAOd,IAAU,IALhDV,EAKgEU,EAASc,OAAON,IALvE,GAAS,EAALlB,EAASA,GAKoE,EAE7G,MAAQ,CAAEyB,UADsB,MAAdR,EAAA,GAAuBA,GAAYM,EAAQ,GAA3C,GAAoDN,GAAY,EAAIM,GACjEG,OAAQlB,EAAKa,UAAUC,UAqCnCK,EAAgB,SAAC9B,EAAMC,EAAOC,GACvC,IACMS,EAAOC,YAAgBZ,EAAMC,EAAOC,EAAK,IAoBzCmB,EAjBM,sBACLC,IAAaS,MAAM,EAAG,IADjB,YAELT,IAAaS,MAAM,GAAI,KAFlB,YAGLT,IAAaS,MAAM,GAAI,KAHlB,YAILT,IAAaS,MAAM,GAAI,KAJlB,YAMLT,IAAaS,MAAM,EAAG,KANjB,YAOLT,IAAaS,MAAM,GAAI,KAPlB,YAQLT,IAAaS,MAAM,GAAI,KARlB,YASLT,IAAaS,MAAM,GAAI,KATlB,YAWLT,IAAaS,MAAM,GAAI,KAXlB,YAYLT,IAAaS,MAAM,GAAI,KAZlB,YAaLT,IAAaS,MAAM,GAAI,KAblB,YAcLT,IAAaS,MAAM,GAAI,MAGTR,QAAQZ,EAAKqB,WAAWP,QAG7C,MAAO,CAAEG,UADM,IAvBH,CAAC,EAAG,EAAG,GAsBJZ,MAAK,SAACiB,EAAIC,GAAL,OAAgB,GAAJA,EAAS,EAAKb,GAASA,EAAmB,IAATa,EAAI,MAEjDL,OAAQlB,EAAKwB,YAAYV","file":"d1f9e0c862d03b998fc0ea304d42c421d3ce4f5a-459b47c37719d8e41198.js","sourcesContent":["import { format } from 'date-fns';\n\nimport { gregorianToBazi } from '../FourPillar'\nimport { SIXTY_PILLAR, DIRECTION, QM_SAN_YUAN, SIXTY_FOUR, TRIGRAM_BINARY, DOOR, STAR } from '../constants'\n\nconst CalenderData = require('./Calendar.json');\n\nexport const getChaiBuHour = (bazi) => {\n    const chart = getQMCBChart(bazi);\n    const hour = bazi.GanZhiHour.ganzhi;\n    const type = Object.keys(QM_SAN_YUAN).findIndex(e => e === bazi.solarTerm) < 12 ? 'M' : 'F';\n    return {\n        pillar: bazi.GanZhiHour.ganzhi,\n        structure: `${type}${chart.substr(1, 1)}`\n    }\n}\n\nexport const getQMCBChart = (bazi) => {\n    const branchYuan = [\n        ['子', '卯', '午', '酉'],\n        ['寅', '巳', '申', '亥'],\n        ['丑', '辰', '未', '戌']\n    ]\n\n    const reverseSixty = [...SIXTY_PILLAR.slice().reverse(), ...SIXTY_PILLAR.slice().reverse()];\n    const rest = reverseSixty.slice(reverseSixty.findIndex(e => e === bazi.GanZhiDay.ganzhi));\n\n    const fuTouBranch = rest.find(e => ['己', '甲'].includes(e.substr(0, 1))).substr(1, 1)\n    const yuan = branchYuan.findIndex(e => e.includes(fuTouBranch));\n    const type = Object.keys(QM_SAN_YUAN).findIndex(e => e === bazi.solarTerm) < 12 ? 'M' : 'F';\n    \n    return `${type}${QM_SAN_YUAN[bazi.solarTerm][yuan]}`;\n}\n\nconst getQMChart = (y, m, d, h) => {\n    const calDate = new Date(y, m - 1, d);\n    const yearMonthKey = format(calDate, 'yyyyMM');\n    const dayIndex = Number(format(calDate, 'd')) - 1;\n    return {\n        pillar: h,\n        structure: CalenderData[yearMonthKey] && CalenderData[yearMonthKey][dayIndex]\n    }\n}\n\nexport const getZRQMHourChart = (y, m, d, h) => {\n    return getHourChart(gregorianToBazi(y, m, d, h))\n}\n\nexport const getHourChart = (bazi) => {\n    return getQMChart(bazi.westernYear, bazi.westernMonth, bazi.westernDay, bazi.GanZhiHour.ganzhi);\n}\n\nexport const searchChart = (filterObject, haystack) => {\n    return haystack.filter(v => {\n        const kk =  v.chart.map((obj, i) => {\n            const compare = filterObject[i];\n            const l = Object.keys(compare).map(k => {\n                const o = compare[k];\n                return o === '' ? true : o.indexOf(obj[k]) > -1 ? true : false; \n            })\n            return l.every(e => e);\n        })\n        return kk.every(e => e);\n    }).map(e => ({ structure: e.structure, hour: e.hour }))\n}\n\n\nconst element = {\n    red: ['丁', '丙', '景', '英', '巳', '午', '離'],\n    blue: ['壬', '癸', '休', '蓬', '子', '亥', '坎'],\n    ['#145A32']: ['乙', '杜', '傷', '辅', '沖', '輔', '寅', '卯', '震', '巽', '甲'],\n    [\"#6E2C00\"]: ['戊', '己', '死', '生', '芮', '任', '丑', '辰', '未', '戌', '艮', '坤'],\n    ['gray']: ['庚', '辛', '开', '柱', '心', '驚', '開', '申', '酉', '乾', '兌'],\n}\n\nexport const getColor = word => {\n    const color = Object.keys(element);\n    return color.find(colorCode => element[colorCode].includes(word));\n}\n\nexport const getDayChart = (year, month, day) => {\n    const lookup = {\n        9: [\"夏至\", \"小暑\", \"大暑\", \"立秋\"],\n        1: [\"冬至\", \"小寒\", \"大寒\", \"立春\"],\n        3: [\"处暑\", \"白露\", \"秋分\", \"寒露\"],\n        7: [\"雨水\", \"惊蛰\", \"春分\", \"清明\"],\n        6: [\"霜降\", \"立冬\", \"小雪\", \"大雪\"],\n        4: [\"谷雨\", \"立夏\", \"小满\", \"芒种\"],\n    }\n    const removeSign = n => n < 0 ? n * -1 : n;\n    const bazi = gregorianToBazi(year, month, day, 12);\n    const start = Object.keys(lookup).find(startJu => lookup[startJu].includes(bazi.solarTerm));\n    const chartType = [\"1\", \"7\", \"4\"].includes(start) ? 'M' : 'F';\n    const index = SIXTY_PILLAR.indexOf(bazi.GanZhiDay.ganzhi);\n    const chart =  chartType === 'M' ? ((index - 1) + Number(start)) % 9 : removeSign((start) - Number(index)) % 9\n    const structure = chartType === 'M' ? `${chartType}${chart + 1}` : `${chartType}${9 - chart}`;\n    return  { structure, pillar: bazi.GanZhiDay.ganzhi }\n}\n\nexport const matchCriteria = (chart1, chart2, palaceIndex, contains) => {\n    \n    return contains.filter(e => [\n        chart1[palaceIndex].god,\n        chart1[palaceIndex].door,\n        chart1[palaceIndex].star,\n        chart2[palaceIndex].god,\n        chart2[palaceIndex].door,\n        chart2[palaceIndex].star\n    ].includes(e)).length === contains.length\n    \n\n}\n\nexport const findDivineBlessing = chart => findSymbol(chart, 'god', '天')\n\nexport const findDivineLight = (chart, star) => findSymbol(chart, 'star', star)\n\nexport const findDivineForce = chart => findSymbol(chart, 'door', '生')\n\nexport const findSymbol = (chart, key, word) => {\n    return { palace: DIRECTION[chart.findIndex(e => e[key] === word)], symbol: word }\n}\n\nexport const starDoorToHexagram = (star, door) => {\n    const doorBinaryIndex = DOOR.findIndex(e => e === door);\n    const starBinaryIndex = STAR.findIndex(e => e === star);\n\n    const hexBinary = TRIGRAM_BINARY[doorBinaryIndex] + TRIGRAM_BINARY[starBinaryIndex];\n    return SIXTY_FOUR[hexBinary]\n}\n\n\n\nexport const getMonthChart = (year, month, day) => {\n    const yin = [1, 4, 7];\n    const bazi = gregorianToBazi(year, month, day, 12);\n\n\n    const lookup = [\n        ...SIXTY_PILLAR.slice(0, 5),\n        ...SIXTY_PILLAR.slice(15, 20),\n        ...SIXTY_PILLAR.slice(30, 35),\n        ...SIXTY_PILLAR.slice(45, 50),\n\n        ...SIXTY_PILLAR.slice(5, 10),\n        ...SIXTY_PILLAR.slice(20, 25),\n        ...SIXTY_PILLAR.slice(35, 40),\n        ...SIXTY_PILLAR.slice(50, 55),\n        \n        ...SIXTY_PILLAR.slice(10, 15),\n        ...SIXTY_PILLAR.slice(25, 30),\n        ...SIXTY_PILLAR.slice(40, 45),\n        ...SIXTY_PILLAR.slice(55, 60),\n    ];\n\n    const index = lookup.indexOf(bazi.GanZhiYear.ganzhi);\n    const ju = yin.find((ju, i) => (i * 20 - 1) < index && index < ((i + 1) * 20));\n    const structure = `F${ju}`\n    return { structure, pillar: bazi.GanZhiMonth.ganzhi}\n}\n\nexport const getSanYuanYearChart = date => {\n    const year1928Structure = 9;\n\n    const bazi = gregorianToBazi(date.getFullYear(),date.getMonth() + 1, date.getDate(), date.getHours());\n    const toYear = [\"小寒\", \"大寒\"].includes(bazi.solarTerm) ? date.getFullYear() - 1: date.getFullYear();\n    const newStructure = year1928Structure - ((toYear - 1928) % 9);\n    return {\n        pillar: bazi.GanZhiYear.ganzhi,\n        structure: `F${newStructure}`,\n    };\n}\n\n\n\n\n\n"],"sourceRoot":""}