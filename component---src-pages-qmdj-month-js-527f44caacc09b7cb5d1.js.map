{"version":3,"sources":["webpack:///./node_modules/date-fns/esm/addMonths/index.js","webpack:///./node_modules/date-fns/esm/differenceInCalendarMonths/index.js","webpack:///./node_modules/date-fns/esm/compareAsc/index.js","webpack:///./src/pages/qmdj/month.js","webpack:///./node_modules/date-fns/esm/differenceInMonths/index.js"],"names":["addMonths","dirtyDate","dirtyAmount","arguments","date","amount","isNaN","Date","NaN","dayOfMonth","getDate","endOfDesiredMonth","getTime","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","differenceInCalendarMonths","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","yearDiff","monthDiff","compareAsc","requiredArgs","toDate","diff","search","chart","palace","thisMonth","sign","difference","Math","abs","isLastMonthNotFull","result","differenceInMonths","SEARCH_PERIOD_IN_MONTH","Array","keys","map","d","compareDate","key","format","DEAULT_DATE_FORMAT","getMonthChart","reduce","a","e","formationIndex","findIndex","o","structure","pillar","hour","includes","DIRECTION","i","concat","f","ee","n","handleSearch","searchFormation","foundYin","Ju","filter","v","substr","find","g","indexOf","display","square","parseISO","DATETIME_FORMAT","heaven","star","door","god","earth","getChart","dateObject","updateChart","y","m","ch","Home","heading","onDateChanged"],"mappings":"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","file":"component---src-pages-qmdj-month-js-527f44caacc09b7cb5d1.js","sourcesContent":["import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * var result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 1, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * var result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import React from \"react\"\nimport Layout from '../../containers/layout'\n\nimport Ju from '../../cm-lib/reference/Ju.json'\nimport { getMonthChart } from '../../cm-lib/QiMen'\nimport { DEAULT_DATE_FORMAT, DATETIME_FORMAT, SEARCH_PERIOD_IN_MONTH, DIRECTION } from '../../cm-lib/constants'\nimport { format, parseISO, addMonths, differenceInMonths } from 'date-fns';\nimport Common from './common'\n\nconst search = (chart, palace) => {\n    const thisMonth = new Date();\n    const searchEndDate = addMonths(thisMonth, SEARCH_PERIOD_IN_MONTH);\n    const diff = differenceInMonths(searchEndDate, thisMonth);\n    return [...Array(diff).keys()].map(d => {\n        const compareDate = addMonths(thisMonth, d);\n        const key = format(compareDate, DEAULT_DATE_FORMAT);\n        const chartList = getMonthChart(compareDate.getFullYear(), compareDate.getMonth() + 1, compareDate.getDate());\n        return [chartList]\n        .reduce((a, e) => {\n            const formationIndex = chart.findIndex(o => e.structure === o.structure && e.pillar === o.hour)\n            \n            if(formationIndex > -1  && palace.includes(DIRECTION[chart[formationIndex].e.i])) {\n \n                return a.concat([{\n                    ...e,\n                    f: { ...chart[formationIndex].e, d: DIRECTION[formationIndex] }\n                }])\n            }\n            return a;\n        }\n        , [])\n        .map(ee =>  {\n            return { ...ee, date: `${key}T00:00:00`};\n        })\n    })\n    .reduce((a, n) => a.concat(n), [])\n  }\n\nconst handleSearch = (searchFormation, palace) => {\n    const foundYin = Ju.filter(v => v.structure.substr(0, 1) === 'F' && v.chart.find(g => g.f && g.f.indexOf(searchFormation) > -1 ))\n    .map(e => ({ structure: e.structure, hour: e.hour, e: { ...e.chart.find(e => e.f === searchFormation), i: e.chart.findIndex(e => e.f === searchFormation) }}))\n    const result = search(foundYin, palace);\n    const display = (v, square) => `${format(parseISO(`${v}`), DATETIME_FORMAT)} ${square.heaven} ${square.star} ${square.door} ${square.god} ${square.earth} ${DIRECTION[square.i]}`\n    return result.map((v, i) => ({ ...v, display: display(v.date, v.f)}))\n  }\n\nconst getChart = (dateObject, updateChart) => {\n\n  const y = format(dateObject, 'yyyy')\n  const m = format(dateObject, 'M')\n  const d = format(dateObject, 'd')\n  const ch = getMonthChart(y, m, d);\n  let foundChart = Ju.find(e => e.structure === ch.structure && e.hour === ch.pillar);\n  updateChart(foundChart);\n}  \n\nconst Home = () => {\n\n  return <Layout><Common\n    heading=\"Qi Men Dun Jia Month Chart\"\n    handleSearch={handleSearch} \n    onDateChanged={getChart}\n  /></Layout>\n}\n\nexport default Home\n","import toDate from '../toDate/index.js';\nimport differenceInCalendarMonths from '../differenceInCalendarMonths/index.js';\nimport compareAsc from '../compareAsc/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - isLastMonthNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}"],"sourceRoot":""}