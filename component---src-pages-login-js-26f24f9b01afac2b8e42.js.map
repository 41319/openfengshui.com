{"version":3,"file":"component---src-pages-login-js-26f24f9b01afac2b8e42.js","mappings":"oYAaMA,GAAU,aAAY,iBAAO,CAAEC,QAAF,OAAmBC,WAAY,aAE5DC,GAAa,WAAgB,iBAAO,CAAEC,eAAgB,aAEtDC,GAAa,aAAY,iBAAO,CACpCC,OADoC,OAEpCC,QAFoC,OAGpCC,SAHoC,WAIpCC,WAAY,0BAiBRC,IAdU,WAAmB,iBAAO,CACxCD,WADwC,UAExCE,UAFwC,kBAGxC,UAAW,CACTC,SADS,IAETD,UAFS,IAGTE,OAHS,OAITZ,QAJS,OAKTa,aALS,GAMTZ,WAAY,cAKM,CACpBa,MADoB,GAEpBC,SAFoB,GAGpBC,UAAU,IAINC,EAAmB,aAAmB,CAC1CF,SAAUG,EAAAA,KAAAA,IAAAA,EAAAA,uCAAAA,SADgC,yBAI1CJ,MAAOI,EAAAA,KAAAA,MAAAA,yBAAAA,SAAAA,wBAqHT,UA9GiB,YACDC,EAAAA,EAAAA,KADO,QAGrB,GAA8BC,EAAAA,EAAAA,WAA9B,cAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAc,IAAIC,gBAAkC,oBAAXC,SAAP,yCAAiCA,EAAjC,6BAAiCA,EAAzE,SACMC,EAAWH,EAAAA,IAAjB,KACMT,EAAQS,EAAAA,IAAd,KACA,GAA8BI,EAAAA,EAAAA,KAAtBC,EAAR,QAAeC,EAAf,aAIMC,IAFWC,EAAAA,EAAAA,eAEK,+BAAG,sFACvBT,GAAAA,GADuB,kBAGfM,EAAMI,MAAAA,OAAD,EAACA,EAAD,MAAgBA,MAAAA,OAAhB,EAAgBA,EAHN,kBAIrBC,EAAAA,EAAAA,UAAAA,KAJqB,gDAMrBJ,EAAW,KAAXA,SACAP,GAAAA,GAPqB,QAUvBA,GAAAA,GAVuB,yDAAH,uDAuBtB,OAVAY,EAAAA,EAAAA,WAAS,cAAC,wFACJR,IADI,kCAEiB,mCAAsC,CAC3DZ,MAD2D,EAE3DqB,IAAKT,IAJD,OAEAU,EAFA,OAMNC,QAAAA,IAAAA,GANM,2CAQP,CAACX,GARJQ,KAWE,+BACE,cAAMI,UAAN,iBACE,gBAAMC,WAAN,aACE,eAAMC,MAAN,EAAWC,GAAX,EAAkBC,GAAlB,aACE,YAAYC,EAAZ,EAAkBtC,OAAlB,OAAgCuC,GAAI,CAAEC,SAAU,UAKlD,eAAML,MAAN,EAAWC,GAAX,GAAmBC,GAAnB,aACE,sBACE,eACEI,SADF,EAEErC,cAFF,EAGEQ,iBAHF,WAKG,gBAAGe,EAAH,SAAWe,EAAX,SAAmBC,EAAnB,UAA4BC,EAA5B,eAA0CC,EAA1C,aAAsDC,EAAtD,sBACC,kBAAML,SAAN,aACE,cACEM,WADF,EAEEC,KAFF,QAGEC,KAHF,QAIEC,KAJF,QAKEC,MALF,QAMEC,QANF,WAOEC,OAPF,EAQEC,MAAO3B,EART,MASE4B,SATF,EAUEC,WAAYb,EAAAA,OAAiBD,EAV/B,MAWEe,MAAOC,QAAQhB,EAAAA,OAAgBC,EAXjC,OAYEJ,GAAI,CAAEoB,GAAI,MAGZ,cACEZ,WADF,EAEEC,KAFF,QAGEE,KAHF,WAIED,KAJF,WAKEE,MALF,WAMEC,QANF,WAOEC,OAPF,EAQEC,MAAO3B,EART,SASE4B,SATF,EAUEC,WAAYb,EAAAA,UAAoBD,EAVlC,SAWEe,MAAOC,QAAQhB,EAAAA,UAAmBC,EAXpC,UAYEJ,GAAI,CAAEoB,GAAI,QAGZ,aAAS7D,eAAT,2BAEA,iBAAM8D,GAAN,mCACA,iBAAMA,GAAN,mDAGA,cACEX,KADF,SAEEY,MAFF,UAGE7C,QAHF,EAIEoC,QAJF,YAKEb,GAAI,CAAEuB,GAAI,GALZ","sources":["webpack://gatsby-redux-material-ui-boilerplate/./src/pages/login.js"],"sourcesContent":["import { LoadingButton } from '@mui/lab';\nimport { Card, Checkbox, Grid, TextField } from '@mui/material';\nimport { Box, styled, useTheme } from '@mui/system';\nimport ThreeCol from '../components/ThreeColLayout'\nimport { Formik } from 'formik';\nimport { useState } from 'react';\nimport * as Yup from 'yup';\nimport Parse from '../vendor/Parse'\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { navigate, Link } from \"gatsby\"\nimport useAuth from \"../hooks/userAuth\";\n\nconst FlexBox = styled(Box)(() => ({ display: 'flex', alignItems: 'center' }));\n\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: 'center' }));\n\nconst ContentBox = styled(Box)(() => ({\n  height: '100%',\n  padding: '32px',\n  position: 'relative',\n  background: 'rgba(0, 0, 0, 0.01)',\n}));\n\nconst JWTRoot = styled(JustifyBox)(() => ({\n  background: '#1A2038',\n  minHeight: '100% !important',\n  '& .card': {\n    maxWidth: 800,\n    minHeight: 400,\n    margin: '1rem',\n    display: 'flex',\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n}));\n\n// inital login credentials\nconst initialValues = {\n  email: '',\n  password: '',\n  remember: true,\n};\n\n// form field validation schema\nconst validationSchema = Yup.object().shape({\n  password: Yup.string()\n    .min(6, 'Password must be 6 character length')\n    .required('Password is required!'),\n  email: Yup.string().email('Invalid Email address').required('Email is required!'),\n});\n\n\n\n\n\nconst JwtLogin = () => {\n  const theme = useTheme();\n\n  const [loading, setLoading] = useState(false);\n  const queryParams = new URLSearchParams(typeof window !== `undefined` && window?.location?.search)\n  const authCode = queryParams.get(\"o\")\n  const email = queryParams.get(\"e\")\n  const { login, setMessage } = useAuth()\n\n  const dispatch = useDispatch()\n\n  const handleFormSubmit = async (values) => {\n    setLoading(true);\n    try {\n      await login(values?.email, values?.password)\n      navigate('/')\n    } catch (e) {\n      setMessage(e.message)\n      setLoading(false);\n    }\n    \n    setLoading(false);\n  };\n\n  useEffect(async () => {\n    if (authCode && email) {\n      const response = await Parse.Cloud.run('verifyEmailAddress', {\n        email: email,\n        otp: authCode\n      })\n      console.log(response)\n    }\n  }, [authCode && email])\n\n  return (\n    <>\n      <Card className=\"card\">\n        <Grid container>\n          <Grid item sm={6} xs={12}>\n            <JustifyBox p={4} height=\"100%\" sx={{ minWidth: 320 }}>\n            \n            </JustifyBox>\n          </Grid>\n\n          <Grid item sm={12} xs={12}>\n            <ContentBox>\n              <Formik\n                onSubmit={handleFormSubmit}\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n              >\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\n                  <form onSubmit={handleSubmit}>\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      type=\"email\"\n                      name=\"email\"\n                      label=\"Email\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.email}\n                      onChange={handleChange}\n                      helperText={touched.email && errors.email}\n                      error={Boolean(errors.email && touched.email)}\n                      sx={{ mb: 3 }}\n                    />\n\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      name=\"password\"\n                      type=\"password\"\n                      label=\"Password\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.password}\n                      onChange={handleChange}\n                      helperText={touched.password && errors.password}\n                      error={Boolean(errors.password && touched.password)}\n                      sx={{ mb: 1.5 }}\n                    />\n\n                    <FlexBox justifyContent=\"space-between\">\n\n                    <Link to=\"/register\">Register</Link>\n                    <Link to=\"/forgotPassword\">Forget Password</Link> \n                    </FlexBox>\n\n                    <LoadingButton\n                      type=\"submit\"\n                      color=\"primary\"\n                      loading={loading}\n                      variant=\"contained\"\n                      sx={{ my: 2 }}\n                    >\n                      Login\n                    </LoadingButton>\n\n                  </form>\n                )}\n              </Formik>\n            </ContentBox>\n          </Grid>\n        </Grid>\n      </Card>\n    </>\n  );\n};\n\nexport default JwtLogin;\n"],"names":["FlexBox","display","alignItems","JustifyBox","justifyContent","ContentBox","height","padding","position","background","initialValues","minHeight","maxWidth","margin","borderRadius","email","password","remember","validationSchema","Yup","useTheme","useState","loading","setLoading","queryParams","URLSearchParams","window","authCode","useAuth","login","setMessage","handleFormSubmit","useDispatch","values","navigate","useEffect","otp","response","console","className","container","item","sm","xs","p","sx","minWidth","onSubmit","errors","touched","handleChange","handleBlur","handleSubmit","fullWidth","size","type","name","label","variant","onBlur","value","onChange","helperText","error","Boolean","mb","to","color","my"],"sourceRoot":""}