{"version":3,"sources":["webpack:///./src/pages/videos/index.js"],"names":["ImageContainer","styled","div","Component","data","renderImage","location","item","index","src","image","imageProps","onClick","navigate","videoId","fit","fill","direction","gap","justify","href","channelId","title","d","Date","now","useState","datasource","setDatasource","setChannels","recentVideoDS","setRecentVideoDS","useEffect","allVideos","allAggVideo","edges","recentVideos","map","node","console","log","id","key","thumbnails","high","url","publishTime","filter","n","toISOString","newDS","allChannel","channel","find","featuredVideo","max","length","dataList","render","query"],"mappings":"4FAAA,8IAWMA,GAXN,UAWuBC,UAAOC,IAAV,6EAAGD,CAAH,sBAsHLE,UA9FG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KACbC,GADkC,EAAfC,SACL,SAACC,EAAMC,GACzB,OACE,kBAACR,EAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CACES,IAAKF,EAAKG,MACVC,WAAY,CACVC,QAAS,WACPC,YAAS,mBAAmBN,EAAKO,UAEnCC,IAAK,QACLC,KAAM,UAGV,kBAAC,IAAD,CAAKC,UAAU,MAAMC,IAAI,QAAQC,QAAQ,UACzC,uBAAGC,KAAI,sBAAwBb,EAAKc,WAApC,sBAGCd,EAAKe,MAfP,IAec,iCAMbC,EAAI,IAAIC,KAAKA,KAAKC,MAAQ,QAzBQ,EA4BJC,mBAAS,IAAtCC,EA5BiC,KA4BrBC,EA5BqB,OA6BRF,mBAAS,IAAxBG,GA7BuB,aA8BEH,mBAAS,IAA5CI,EA9BiC,KA8BlBC,EA9BkB,KAqExC,OAtCAC,qBAAU,WACR,IAEMC,EAAY7B,EAAK8B,YAAYC,MAE7BC,EAAeH,EAAUI,KAAI,YAAe,IAAD,IAAXC,EAAW,EAAXA,KAEpC,OADAC,QAAQC,IAAIF,GACL,CACLG,GAAIH,EAAKI,IACThC,MAAO4B,SAAF,UAAEA,EAAMK,kBAAR,iBAAE,EAAkBC,YAApB,aAAE,EAAwBC,IAC/BvB,MAAOgB,EAAKhB,MACZwB,YAAaR,EAAKQ,YAClBzB,UAAWiB,EAAKjB,UAChBP,QAASwB,EAAKI,QAGjBK,QAAO,SAAAC,GAAC,OAAIA,EAAEF,YAAcvB,EAAE0B,iBAEzBC,EAAQ9C,EAAK+C,WAAWhB,MAAME,KAAI,SAACe,GACvC,OAAOhD,EAAK8B,YAAYC,MACvBkB,MAAK,qBAAGf,KAAgBjB,YAAc+B,EAAQd,KAAKjB,gBAErDgB,KAAI,gBAAGC,EAAH,EAAGA,KAAH,wBACAA,MAEJD,KAAI,SAAAe,GAAY,IAAD,MACRE,EAAgBrB,EAAUoB,MAAK,gBAAGf,EAAH,EAAGA,KAAH,OAAcc,EAAQ/B,YAAciB,EAAKjB,aAC9E,OAAO,OAAP,UACK+B,EADL,CAEEtC,QAASwC,EAAchB,KAAKI,IAC5BhC,MAAK,UAAE4C,EAAchB,YAAhB,iBAAE,EAAoBK,kBAAtB,iBAAE,EAAgCC,YAAlC,aAAE,EAAsCC,SAIjDhB,EAAYzB,EAAK+C,YACjBvB,EAAcsB,GACdnB,EAAiBK,KAChB,CAAChC,EAAK8B,YAAYC,QAEnB,oCAEI,kBAAC,IAAD,CAAQoB,IAAI,QAEV,kBAAC,IAAD,CAAKrC,IAAI,SAELY,EAAc0B,OAAS,GAAK,4CAE9B,kBAAC,IAAD,CAAUC,SAAU3B,EAAe4B,OAAQrD,IAE3C,0GAA+E,uBAAGe,KAAK,iCAAR,gBAA/E,KAGA,kBAAC,IAAD,CAAUqC,SAAU9B,EAAY+B,OAAQrD,QAa7C,IAAMsD,EAAK","file":"component---src-pages-videos-index-js-63221525622a8efdfe0f.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { Box } from \"grommet\"\nimport { graphql } from \"gatsby\"\nimport styled from \"styled-components\"\nimport { navigate } from \"gatsby\"\nimport Layout from \"../../containers/layout\"\nimport Image from \"../../components/Image\"\nimport { format, parseISO } from 'date-fns'\nimport CardList from \"../../components/CardListing/NewCardList\"\nimport querystring from \"query-string\"\n\nconst ImageContainer = styled.div`\n  cursor: pointer;\n`\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n    randomIndex\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex)\n    currentIndex--\n\n    // And swap it with the current element.\n    ;[array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ]\n  }\n\n  return array\n}\n\nconst Component = ({ data, location }) => {\n  const renderImage = (item, index) => {\n    return (\n      <ImageContainer\n      ><Box> \n        <Image\n          src={item.image}\n          imageProps={{\n            onClick: () => {\n              navigate(`/videos/view?id=${item.videoId}`)\n            },\n            fit: \"cover\",\n            fill: \"true\",\n          }}\n        />\n        <Box direction=\"row\" gap=\"small\" justify=\"center\">\n        <a href={`/videos/channel?id=${item.channelId}`}>More From Channel</a>\n        </Box>\n\n        {item.title} <br />\n        \n        </Box>\n      </ImageContainer>\n    )\n  }\n  const d = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) \n\n\n  const [datasource, setDatasource] = useState([])\n  const [channels, setChannels] = useState([])\n  const [recentVideoDS, setRecentVideoDS] = useState([])\n  useEffect(() => {\n    let result = []\n\n    const allVideos = data.allAggVideo.edges;\n\n    const recentVideos = allVideos.map(({ node }) => {\n      console.log(node)\n      return {\n        id: node.key,\n        image: node?.thumbnails?.high?.url,\n        title: node.title,\n        publishTime: node.publishTime,\n        channelId: node.channelId,\n        videoId: node.key\n      }\n    })\n    .filter(n => n.publishTime > d.toISOString())\n\n    const newDS = data.allChannel.edges.map((channel) => {\n      return data.allAggVideo.edges\n      .find(({ node }) => node.channelId === channel.node.channelId)\n    })\n    .map(({ node }) => ({\n      ...node\n    }))\n    .map(channel => {\n      const featuredVideo = allVideos.find(({ node }) => channel.channelId === node.channelId )\n      return {\n        ...channel,\n        videoId: featuredVideo.node.key,\n        image: featuredVideo.node?.thumbnails?.high?.url\n      }\n    })\n\n    setChannels(data.allChannel)\n    setDatasource(newDS)\n    setRecentVideoDS(recentVideos)\n  }, [data.allAggVideo.edges])\n  return (\n    <>\n      {\n        <Layout max=\"100%\">\n\n          <Box gap=\"small\">\n            {\n              recentVideoDS.length > 0 && <h3>Recent Video</h3>\n            }\n            <CardList dataList={recentVideoDS} render={renderImage} />\n\n            <p>Feng Shui Channel (Source From Youtube) (Add/Remove Listing, Please Contact <a href=\"mailto:openfengshui@gmail.com\">OpenFengShui</a>)\n            </p>\n            \n            <CardList dataList={datasource} render={renderImage} />\n            \n          </Box>\n\n          \n        </Layout>\n      }\n    </>\n  )\n}\n\nexport default Component\n\nexport const query = graphql`\nquery MyQuery333 {\n  allAggVideo(sort: {fields: publishedAt, order: DESC}) {\n    edges {\n      node {\n        key\n        channelId\n        title\n        thumbnails {\n          high {\n            url\n          }\n        }\n        publishedAt\n        publishTime\n      }\n    }\n  }\n\n  allChannel {\n    edges {\n      node {\n        id\n        title\n        channelId\n      }\n    }\n  }\n}\n`\n"],"sourceRoot":""}