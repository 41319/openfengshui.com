{"version":3,"sources":["webpack:///./node_modules/date-fns/esm/toDate/index.js","webpack:///./node_modules/date-fns/esm/_lib/toInteger/index.js","webpack:///./node_modules/date-fns/esm/parseISO/index.js","webpack:///./node_modules/lunar-calendar/lib/LunarCalendar.js","webpack:///./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack:///./node_modules/date-fns/esm/startOfDay/index.js","webpack:///./node_modules/date-fns/esm/differenceInCalendarDays/index.js","webpack:///./node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack:///./src/cm-lib/util/number.js","webpack:///./src/cm-lib/DateSelection/index.js","webpack:///./src/cm-lib/FourPillar/index.js"],"names":["toDate","argument","arguments","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","NaN","toInteger","dirtyNumber","number","Number","isNaN","Math","ceil","floor","patterns","dateTimeDelimiter","timeZoneDelimiter","timezone","dateRegex","timeRegex","timezoneRegex","parseISO","dirtyOptions","options","additionalDigits","RangeError","date","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","year","offset","timestamp","time","parseTime","dirtyDate","result","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","setFullYear","parseTimezone","dateString","timeString","array","split","length","test","substr","token","exec","replace","regex","RegExp","captures","match","parseInt","century","slice","isWeekDate","dayOfYear","parseDateUnit","month","day","week","dayOfWeek","_year","validateWeekDate","isoWeekYear","setUTCFullYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","dayOfISOWeekYear","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","max","value","hours","parseTimeUnit","minutes","seconds","validateTime","parseFloat","timezoneString","sign","_hours","validateTimezone","extend","o","c","p","creatLenArr","len","start","arr","k","i","push","errorCode","cache","cacheUtil","current","setCurrent","this","clear","set","key","get","formateDayD4","DATA","heavenlyStems","earthlyBranches","zodiac","solarTerm","monthCn","dateCn","worktime","solarFestival","lunarFestival","lunarInfo","termInfo","getLunarYearDays","yearData","leapMonth","monthDataArr","unshift","yearDays","monthDays","getLunarByBetween","between","year1","month1","day1","getDaysBetweenSolar","lunarYearDays","end","abs","tempDays","getLunarDateByBetween","getTerm","y","n","UTC","getYearZodiac","cyclical","num","getLunarYearName","getLunarMonthName","getLunarDayName","getSolarMonthDays","isLeapYear","formateDate","_minYear","argsLen","now","getFullYear","getMonth","getDate","minYear","error","msg","solarToLunar","_month","_day","inputDate","term2","termList","res","getYearTerm","GanZhiYear","GanZhiMonth","lunarDate","lunarLeapMonth","getLunarLeapYear","lunarMonthName","lunarFtv","lunarMonthDays","GanZhiDay","term","lunarYear","lunarMonth","lunarDay","lunarDayName","solarCalendar","fill","preMonthDays","preMonthData","nextMonthData","firstDay","getDay","monthData","preYear","preMonth","concat","nextYear","nextMonth","fillLen","LunarCalendar","lunarToSolar","days","getDaysBetweenZheng","zenMonth","zenDay","offDate","calendar","calendarData","cData","lunarData","setWorktime","workData","getDateMillisecondsPart","getTimezoneOffsetInMilliseconds","baseTimezoneOffset","getTimezoneOffset","setSeconds","startOfDay","requiredArgs","setHours","differenceInCalendarDays","dirtyDateLeft","dirtyDateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","round","required","args","TypeError","isEven","getEmptinessBranch","pillar","iterate","SIXTY_PILLAR","distanceToGui","HS","findIndex","e","pillarIndex","pillar1","pillar2","getPillarSequence","direction","concatPillar","Array","reduce","a","useConcatPillar","reverse","indexOf","deriveStars","hour","dayBranch","ganzhi","dayStem","classical","ClassicalStars","join","blindman","_gregorianToBazi","min","gender","found","GanZhiHour","calculateHour","gregorianToBazi","westernAge","bazi","yearMonthString","padStart","SolarTerm","find","d","NextSolarTerm","principalSolarTerms","SOLAR_TERM","filter","principalTermForDate","includes","s","ptIndex","referencePT","nextPrincipalTermForDate","transitionDay","dayToNextTerm","dayToNextPrincipalTerm","dayToPreviousPrincipalTerm","getSolarTerm","forward","startAgeQuotient","startWesternAge","tenYearCycle","hundredYear","monthBazi","monthCycle","convertGanZhi","activeLuckPillarIndex","currentYearPillar","currentLuckPillar","westernYear","westernMonth","westernDay","startAge","map","stars","dayNayin","NaYin","ganIndex","zhiIndex","EB","dayGan","hourBranchIndex","dayStemIndex","hourStemIndex","calculateHourStem","dayStemNumber","hourBranchNumber"],"mappings":"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EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,GAEX,MAAiB,CACf,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,EACT,MAAS,IAGPC,EAAgB,CAClB,MAAS,MACT,MAAS,QACT,MAAS,QACT,MAAS,MACT,MAAS,QACT,MAAS,QACT,MAAS,SACT,MAAS,MACT,MAAS,eACT,MAAS,QACT,MAAS,SACT,MAAS,cACT,MAAS,wBACT,MAAS,OACT,MAAS,QACT,MAAS,WACT,MAAS,cACT,MAAS,UACT,MAAS,8BACT,MAAS,QACT,MAAS,QACT,MAAS,WACT,MAAS,WACT,MAAS,MACT,MAAS,MACT,MAAS,UACT,MAAS,SACT,MAAS,QACT,MAAS,QACT,MAAS,QACT,MAAS,SACT,MAAS,UACT,MAAS,WACT,MAAS,QACT,MAAS,QACT,MAAS,QACT,MAAS,QACT,MAAS,QACT,MAAS,YACT,MAAS,UACT,MAAS,QACT,MAAS,QACT,MAAS,qBACT,MAAS,UACT,MAAS,UACT,MAAS,QACT,MAAS,QACT,MAAS,MACT,MAAS,aACT,MAAS,WACT,MAAS,iBACT,MAAS,UACT,MAAS,QACT,MAAS,UACT,MAAS,WACT,MAAS,WACT,MAAS,QACT,MAAS,QACT,MAAS,OACT,MAAS,kBACT,MAAS,eACT,MAAS,QACT,MAAS,MACT,MAAS,eACT,MAAS,cACT,MAAS,kBACT,MAAS,cACT,MAAS,QACT,MAAS,cACT,MAAS,QACT,MAAS,UACT,MAAS,UACT,MAAS,eACT,MAAS,QACT,MAAS,cACT,MAAS,QACT,MAAS,cACT,MAAS,QACT,MAAS,oBACT,MAAS,WACT,MAAS,SACT,MAAS,eACT,MAAS,cACT,MAAS,gBACT,MAAS,SACT,MAAS,SACT,MAAS,iBACT,MAAS,UACT,MAAS,QACT,MAAS,QACT,MAAS,UACT,MAAS,yBACT,MAAS,SACT,MAAS,QACT,MAAS,MACT,MAAS,MACT,MAAS,WAGPC,EAAgB,CAClB,MAAS,KACT,MAAS,MACT,MAAS,OACT,MAAS,OACT,MAAS,MACT,MAAS,QACT,MAAS,MACT,MAAS,MACT,MAAS,MACT,MAAS,MACT,MAAS,MACT,MAAS,KACT,MAAS,MAQPC,EAAY,CAAC,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,MAAO,CAAC,EAAG,EAAG,GAAI,MAAO,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,MAAO,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,GAAI,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,MAAO,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,GAAI,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,EAAG,OAAQ,CAAC,EAAG,EAAG,GAAI,OAAQ,CAAC,EAAG,EAAG,GA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","file":"c2f80a1722b21d0e31c2e54b9eab2afb9796663f-068b73619c384f010575.js","sourcesContent":["import requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate(), dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    result.setFullYear(dirtyDate.getUTCFullYear());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","/**\r\n * 农历（阴历）万年历\r\n * LunarCalendar\r\n * vervison : v0.1.4\r\n * Github : https://github.com/zzyss86/LunarCalendar\r\n * HomePage : http://www.tuijs.com/\r\n * Author : JasonZhou\r\n * Email : zzyss86@qq.com\r\n */\n(function () {\n  var extend = function extend(o, c) {\n    if (o && c && typeof c == \"object\") {\n      for (var p in c) {\n        o[p] = c[p];\n      }\n    }\n\n    return o;\n  };\n\n  var creatLenArr = function creatLenArr(year, month, len, start) {\n    var arr = [];\n    start = start || 0;\n    if (len < 1) return arr;\n    var k = start;\n\n    for (var i = 0; i < len; i++) {\n      arr.push({\n        year: year,\n        month: month,\n        day: k\n      });\n      k++;\n    }\n\n    return arr;\n  };\n\n  var errorCode = {\n    //错误码列表\n    100: '输入的年份超过了可查询范围，仅支持1891至2100年',\n    101: '参数输入错误，请查阅文档'\n  };\n  var cache = null; //某年相同计算进行cache，以加速计算速度\n\n  var cacheUtil = {\n    //cache管理工具\n    current: '',\n    setCurrent: function setCurrent(year) {\n      if (this.current != year) {\n        this.current = year;\n        this.clear();\n      }\n    },\n    set: function set(key, value) {\n      if (!cache) cache = {};\n      cache[key] = value;\n      return cache[key];\n    },\n    get: function get(key) {\n      if (!cache) cache = {};\n      return cache[key];\n    },\n    clear: function clear() {\n      cache = null;\n    }\n  };\n\n  var formateDayD4 = function formateDayD4(month, day) {\n    month = month + 1;\n    month = month < 10 ? '0' + month : month;\n    day = day < 10 ? '0' + day : day;\n    return 'd' + month + day;\n  };\n\n  var minYear = 1890; //最小年限\n\n  var maxYear = 2100; //最大年限\n\n  var DATA = {\n    heavenlyStems: ['甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬', '癸'],\n    //天干\n    earthlyBranches: ['子', '丑', '寅', '卯', '辰', '巳', '午', '未', '申', '酉', '戌', '亥'],\n    //地支\n    zodiac: ['鼠', '牛', '虎', '兔', '龙', '蛇', '马', '羊', '猴', '鸡', '狗', '猪'],\n    //对应地支十二生肖\n    solarTerm: ['小寒', '大寒', '立春', '雨水', '惊蛰', '春分', '清明', '谷雨', '立夏', '小满', '芒种', '夏至', '小暑', '大暑', '立秋', '处暑', '白露', '秋分', '寒露', '霜降', '立冬', '小雪', '大雪', '冬至'],\n    //二十四节气\n    monthCn: ['正', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],\n    dateCn: ['初一', '初二', '初三', '初四', '初五', '初六', '初七', '初八', '初九', '初十', '十一', '十二', '十三', '十四', '十五', '十六', '十七', '十八', '十九', '二十', '廿一', '廿二', '廿三', '廿四', '廿五', '廿六', '廿七', '廿八', '廿九', '三十', '卅一']\n  }; //中国节日放假安排，外部设置，0无特殊安排，1工作，2放假\n\n  var worktime = {}; //默认设置2013-2014年放假安排\n\n  worktime.y2013 = {\n    \"d0101\": 2,\n    \"d0102\": 2,\n    \"d0103\": 2,\n    \"d0105\": 1,\n    \"d0106\": 1,\n    \"d0209\": 2,\n    \"d0210\": 2,\n    \"d0211\": 2,\n    \"d0212\": 2,\n    \"d0213\": 2,\n    \"d0214\": 2,\n    \"d0215\": 2,\n    \"d0216\": 1,\n    \"d0217\": 1,\n    \"d0404\": 2,\n    \"d0405\": 2,\n    \"d0406\": 2,\n    \"d0407\": 1,\n    \"d0427\": 1,\n    \"d0428\": 1,\n    \"d0429\": 2,\n    \"d0430\": 2,\n    \"d0501\": 2,\n    \"d0608\": 1,\n    \"d0609\": 1,\n    \"d0610\": 2,\n    \"d0611\": 2,\n    \"d0612\": 2,\n    \"d0919\": 2,\n    \"d0920\": 2,\n    \"d0921\": 2,\n    \"d0922\": 1,\n    \"d0929\": 1,\n    \"d1001\": 2,\n    \"d1002\": 2,\n    \"d1003\": 2,\n    \"d1004\": 2,\n    \"d1005\": 2,\n    \"d1006\": 2,\n    \"d1007\": 2,\n    \"d1012\": 1\n  };\n  worktime.y2014 = {\n    \"d0101\": 2,\n    \"d0126\": 1,\n    \"d0131\": 2,\n    \"d0201\": 2,\n    \"d0202\": 2,\n    \"d0203\": 2,\n    \"d0204\": 2,\n    \"d0205\": 2,\n    \"d0206\": 2,\n    \"d0208\": 1,\n    \"d0405\": 2,\n    \"d0407\": 2,\n    \"d0501\": 2,\n    \"d0502\": 2,\n    \"d0503\": 2,\n    \"d0504\": 1,\n    \"d0602\": 2,\n    \"d0908\": 2,\n    \"d0928\": 1,\n    \"d1001\": 2,\n    \"d1002\": 2,\n    \"d1003\": 2,\n    \"d1004\": 2,\n    \"d1005\": 2,\n    \"d1006\": 2,\n    \"d1007\": 2,\n    \"d1011\": 1\n  }; //公历节日\n\n  var solarFestival = {\n    'd0101': '元旦节',\n    'd0202': '世界湿地日',\n    'd0210': '国际气象节',\n    'd0214': '情人节',\n    'd0301': '国际海豹日',\n    'd0303': '全国爱耳日',\n    'd0305': '学雷锋纪念日',\n    'd0308': '妇女节',\n    'd0312': '植树节 孙中山逝世纪念日',\n    'd0314': '国际警察日',\n    'd0315': '消费者权益日',\n    'd0317': '中国国医节 国际航海日',\n    'd0321': '世界森林日 消除种族歧视国际日 世界儿歌日',\n    'd0322': '世界水日',\n    'd0323': '世界气象日',\n    'd0324': '世界防治结核病日',\n    'd0325': '全国中小学生安全教育日',\n    'd0330': '巴勒斯坦国土日',\n    'd0401': '愚人节 全国爱国卫生运动月(四月) 税收宣传月(四月)',\n    'd0407': '世界卫生日',\n    'd0422': '世界地球日',\n    'd0423': '世界图书和版权日',\n    'd0424': '亚非新闻工作者日',\n    'd0501': '劳动节',\n    'd0504': '青年节',\n    'd0505': '碘缺乏病防治日',\n    'd0508': '世界红十字日',\n    'd0512': '国际护士节',\n    'd0515': '国际家庭日',\n    'd0517': '世界电信日',\n    'd0518': '国际博物馆日',\n    'd0520': '全国学生营养日',\n    'd0522': '国际生物多样性日',\n    'd0523': '国际牛奶日',\n    'd0531': '世界无烟日',\n    'd0601': '国际儿童节',\n    'd0605': '世界环境日',\n    'd0606': '全国爱眼日',\n    'd0617': '防治荒漠化和干旱日',\n    'd0623': '国际奥林匹克日',\n    'd0625': '全国土地日',\n    'd0626': '国际禁毒日',\n    'd0701': '香港回归纪念日 中共诞辰 世界建筑日',\n    'd0702': '国际体育记者日',\n    'd0707': '抗日战争纪念日',\n    'd0711': '世界人口日',\n    'd0730': '非洲妇女日',\n    'd0801': '建军节',\n    'd0808': '中国男子节(爸爸节)',\n    'd0815': '抗日战争胜利纪念',\n    'd0908': '国际扫盲日 国际新闻工作者日',\n    'd0909': '毛泽东逝世纪念',\n    'd0910': '中国教师节',\n    'd0914': '世界清洁地球日',\n    'd0916': '国际臭氧层保护日',\n    'd0918': '九一八事变纪念日',\n    'd0920': '国际爱牙日',\n    'd0927': '世界旅游日',\n    'd0928': '孔子诞辰',\n    'd1001': '国庆节 世界音乐日 国际老人节',\n    'd1002': '国际和平与民主自由斗争日',\n    'd1004': '世界动物日',\n    'd1006': '老人节',\n    'd1008': '全国高血压日 世界视觉日',\n    'd1009': '世界邮政日 万国邮联日',\n    'd1010': '辛亥革命纪念日 世界精神卫生日',\n    'd1013': '世界保健日 国际教师节',\n    'd1014': '世界标准日',\n    'd1015': '国际盲人节(白手杖节)',\n    'd1016': '世界粮食日',\n    'd1017': '世界消除贫困日',\n    'd1022': '世界传统医药日',\n    'd1024': '联合国日 世界发展信息日',\n    'd1031': '世界勤俭日',\n    'd1107': '十月社会主义革命纪念日',\n    'd1108': '中国记者日',\n    'd1109': '全国消防安全宣传教育日',\n    'd1110': '世界青年节',\n    'd1111': '国际科学与和平周(本日所属的一周)',\n    'd1112': '孙中山诞辰纪念日',\n    'd1114': '世界糖尿病日',\n    'd1117': '国际大学生节 世界学生节',\n    'd1121': '世界问候日 世界电视日',\n    'd1129': '国际声援巴勒斯坦人民国际日',\n    'd1201': '世界艾滋病日',\n    'd1203': '世界残疾人日',\n    'd1205': '国际经济和社会发展志愿人员日',\n    'd1208': '国际儿童电视日',\n    'd1209': '世界足球日',\n    'd1210': '世界人权日',\n    'd1212': '西安事变纪念日',\n    'd1213': '南京大屠杀(1937年)纪念日！紧记血泪史！',\n    'd1220': '澳门回归纪念',\n    'd1221': '国际篮球日',\n    'd1224': '平安夜',\n    'd1225': '圣诞节',\n    'd1226': '毛泽东诞辰纪念'\n  }; //农历节日\n\n  var lunarFestival = {\n    'd0101': '春节',\n    'd0115': '元宵节',\n    'd0202': '龙抬头节',\n    'd0323': '妈祖生辰',\n    'd0505': '端午节',\n    'd0707': '七夕情人节',\n    'd0715': '中元节',\n    'd0815': '中秋节',\n    'd0909': '重阳节',\n    'd1015': '下元节',\n    'd1208': '腊八节',\n    'd1223': '小年',\n    'd0100': '除夕'\n  };\n  /**\r\n   * 1890 - 2100 年的农历数据\r\n   * 数据格式：[0,2,9,21936]\r\n   * [闰月所在月，0为没有闰月; *正月初一对应公历月; *正月初一对应公历日; *农历每月的天数的数组（需转换为二进制,得到每月大小，0=小月(29日),1=大月(30日)）;]\r\n  */\n\n  var lunarInfo = [[2, 1, 21, 22184], [0, 2, 9, 21936], [6, 1, 30, 9656], [0, 2, 17, 9584], [0, 2, 6, 21168], [5, 1, 26, 43344], [0, 2, 13, 59728], [0, 2, 2, 27296], [3, 1, 22, 44368], [0, 2, 10, 43856], [8, 1, 30, 19304], [0, 2, 19, 19168], [0, 2, 8, 42352], [5, 1, 29, 21096], [0, 2, 16, 53856], [0, 2, 4, 55632], [4, 1, 25, 27304], [0, 2, 13, 22176], [0, 2, 2, 39632], [2, 1, 22, 19176], [0, 2, 10, 19168], [6, 1, 30, 42200], [0, 2, 18, 42192], [0, 2, 6, 53840], [5, 1, 26, 54568], [0, 2, 14, 46400], [0, 2, 3, 54944], [2, 1, 23, 38608], [0, 2, 11, 38320], [7, 2, 1, 18872], [0, 2, 20, 18800], [0, 2, 8, 42160], [5, 1, 28, 45656], [0, 2, 16, 27216], [0, 2, 5, 27968], [4, 1, 24, 44456], [0, 2, 13, 11104], [0, 2, 2, 38256], [2, 1, 23, 18808], [0, 2, 10, 18800], [6, 1, 30, 25776], [0, 2, 17, 54432], [0, 2, 6, 59984], [5, 1, 26, 27976], [0, 2, 14, 23248], [0, 2, 4, 11104], [3, 1, 24, 37744], [0, 2, 11, 37600], [7, 1, 31, 51560], [0, 2, 19, 51536], [0, 2, 8, 54432], [6, 1, 27, 55888], [0, 2, 15, 46416], [0, 2, 5, 22176], [4, 1, 25, 43736], [0, 2, 13, 9680], [0, 2, 2, 37584], [2, 1, 22, 51544], [0, 2, 10, 43344], [7, 1, 29, 46248], [0, 2, 17, 27808], [0, 2, 6, 46416], [5, 1, 27, 21928], [0, 2, 14, 19872], [0, 2, 3, 42416], [3, 1, 24, 21176], [0, 2, 12, 21168], [8, 1, 31, 43344], [0, 2, 18, 59728], [0, 2, 8, 27296], [6, 1, 28, 44368], [0, 2, 15, 43856], [0, 2, 5, 19296], [4, 1, 25, 42352], [0, 2, 13, 42352], [0, 2, 2, 21088], [3, 1, 21, 59696], [0, 2, 9, 55632], [7, 1, 30, 23208], [0, 2, 17, 22176], [0, 2, 6, 38608], [5, 1, 27, 19176], [0, 2, 15, 19152], [0, 2, 3, 42192], [4, 1, 23, 53864], [0, 2, 11, 53840], [8, 1, 31, 54568], [0, 2, 18, 46400], [0, 2, 7, 46752], [6, 1, 28, 38608], [0, 2, 16, 38320], [0, 2, 5, 18864], [4, 1, 25, 42168], [0, 2, 13, 42160], [10, 2, 2, 45656], [0, 2, 20, 27216], [0, 2, 9, 27968], [6, 1, 29, 44448], [0, 2, 17, 43872], [0, 2, 6, 38256], [5, 1, 27, 18808], [0, 2, 15, 18800], [0, 2, 4, 25776], [3, 1, 23, 27216], [0, 2, 10, 59984], [8, 1, 31, 27432], [0, 2, 19, 23232], [0, 2, 7, 43872], [5, 1, 28, 37736], [0, 2, 16, 37600], [0, 2, 5, 51552], [4, 1, 24, 54440], [0, 2, 12, 54432], [0, 2, 1, 55888], [2, 1, 22, 23208], [0, 2, 9, 22176], [7, 1, 29, 43736], [0, 2, 18, 9680], [0, 2, 7, 37584], [5, 1, 26, 51544], [0, 2, 14, 43344], [0, 2, 3, 46240], [4, 1, 23, 46416], [0, 2, 10, 44368], [9, 1, 31, 21928], [0, 2, 19, 19360], [0, 2, 8, 42416], [6, 1, 28, 21176], [0, 2, 16, 21168], [0, 2, 5, 43312], [4, 1, 25, 29864], [0, 2, 12, 27296], [0, 2, 1, 44368], [2, 1, 22, 19880], [0, 2, 10, 19296], [6, 1, 29, 42352], [0, 2, 17, 42208], [0, 2, 6, 53856], [5, 1, 26, 59696], [0, 2, 13, 54576], [0, 2, 3, 23200], [3, 1, 23, 27472], [0, 2, 11, 38608], [11, 1, 31, 19176], [0, 2, 19, 19152], [0, 2, 8, 42192], [6, 1, 28, 53848], [0, 2, 15, 53840], [0, 2, 4, 54560], [5, 1, 24, 55968], [0, 2, 12, 46496], [0, 2, 1, 22224], [2, 1, 22, 19160], [0, 2, 10, 18864], [7, 1, 30, 42168], [0, 2, 17, 42160], [0, 2, 6, 43600], [5, 1, 26, 46376], [0, 2, 14, 27936], [0, 2, 2, 44448], [3, 1, 23, 21936], [0, 2, 11, 37744], [8, 2, 1, 18808], [0, 2, 19, 18800], [0, 2, 8, 25776], [6, 1, 28, 27216], [0, 2, 15, 59984], [0, 2, 4, 27424], [4, 1, 24, 43872], [0, 2, 12, 43744], [0, 2, 2, 37600], [3, 1, 21, 51568], [0, 2, 9, 51552], [7, 1, 29, 54440], [0, 2, 17, 54432], [0, 2, 5, 55888], [5, 1, 26, 23208], [0, 2, 14, 22176], [0, 2, 3, 42704], [4, 1, 23, 21224], [0, 2, 11, 21200], [8, 1, 31, 43352], [0, 2, 19, 43344], [0, 2, 7, 46240], [6, 1, 27, 46416], [0, 2, 15, 44368], [0, 2, 5, 21920], [4, 1, 24, 42448], [0, 2, 12, 42416], [0, 2, 2, 21168], [3, 1, 22, 43320], [0, 2, 9, 26928], [7, 1, 29, 29336], [0, 2, 17, 27296], [0, 2, 6, 44368], [5, 1, 26, 19880], [0, 2, 14, 19296], [0, 2, 3, 42352], [4, 1, 24, 21104], [0, 2, 10, 53856], [8, 1, 30, 59696], [0, 2, 18, 54560], [0, 2, 7, 55968], [6, 1, 27, 27472], [0, 2, 15, 22224], [0, 2, 5, 19168], [4, 1, 25, 42216], [0, 2, 12, 42192], [0, 2, 1, 53584], [2, 1, 21, 55592], [0, 2, 9, 54560]];\n  /**\r\n   * 二十四节气数据，节气点时间（单位是分钟）\r\n   * 从0小寒起算\r\n   */\n\n  var termInfo = [0, 21208, 42467, 63836, 85337, 107014, 128867, 150921, 173149, 195551, 218072, 240693, 263343, 285989, 308563, 331033, 353350, 375494, 397447, 419210, 440795, 462224, 483532, 504758];\n  /**\r\n   * 判断农历年闰月数\r\n   * @param {Number} year 农历年\r\n   * return 闰月数 （月份从1开始）\r\n   */\n\n  function getLunarLeapYear(year) {\n    var yearData = lunarInfo[year - minYear];\n    return yearData[0];\n  }\n\n  ;\n  /**\r\n   * 获取农历年份一年的每月的天数及一年的总天数\r\n   * @param {Number} year 农历年\r\n   */\n\n  function getLunarYearDays(year) {\n    var yearData = lunarInfo[year - minYear];\n    var leapMonth = yearData[0]; //闰月\n\n    var monthData = yearData[3].toString(2);\n    var monthDataArr = monthData.split(''); //还原数据至16位,少于16位的在前面插入0（二进制存储时前面的0被忽略）\n\n    for (var i = 0; i < 16 - monthDataArr.length; i++) {\n      monthDataArr.unshift(0);\n    }\n\n    var len = leapMonth ? 13 : 12; //该年有几个月\n\n    var yearDays = 0;\n    var monthDays = [];\n\n    for (var i = 0; i < len; i++) {\n      if (monthDataArr[i] == 0) {\n        yearDays += 29;\n        monthDays.push(29);\n      } else {\n        yearDays += 30;\n        monthDays.push(30);\n      }\n    }\n\n    return {\n      yearDays: yearDays,\n      monthDays: monthDays\n    };\n  }\n\n  ;\n  /**\r\n   * 通过间隔天数查找农历日期\r\n   * @param {Number} year,between 农历年，间隔天数\r\n   */\n\n  function getLunarDateByBetween(year, between) {\n    var lunarYearDays = getLunarYearDays(year);\n    var end = between > 0 ? between : lunarYearDays.yearDays - Math.abs(between);\n    var monthDays = lunarYearDays.monthDays;\n    var tempDays = 0;\n    var month = 0;\n\n    for (var i = 0; i < monthDays.length; i++) {\n      tempDays += monthDays[i];\n\n      if (tempDays > end) {\n        month = i;\n        tempDays = tempDays - monthDays[i];\n        break;\n      }\n    }\n\n    return [year, month, end - tempDays + 1];\n  }\n\n  ;\n  /**\r\n   * 根据距离正月初一的天数计算农历日期\r\n   * @param {Number} year 公历年，月，日\r\n   */\n\n  function getLunarByBetween(year, month, day) {\n    var yearData = lunarInfo[year - minYear];\n    var zenMonth = yearData[1];\n    var zenDay = yearData[2];\n    var between = getDaysBetweenSolar(year, zenMonth - 1, zenDay, year, month, day);\n\n    if (between == 0) {\n      //正月初一\n      return [year, 0, 1];\n    } else {\n      var lunarYear = between > 0 ? year : year - 1;\n      return getLunarDateByBetween(lunarYear, between);\n    }\n  }\n\n  ;\n  /**\r\n   * 两个公历日期之间的天数\r\n   */\n\n  function getDaysBetweenSolar(year, month, day, year1, month1, day1) {\n    var date = new Date(year, month, day).getTime();\n    var date1 = new Date(year1, month1, day1).getTime();\n    return (date1 - date) / 86400000;\n  }\n\n  ;\n  /**\r\n   * 计算农历日期离正月初一有多少天\r\n   * @param {Number} year,month,day 农年，月(0-12，有闰月)，日\r\n   */\n\n  function getDaysBetweenZheng(year, month, day) {\n    var lunarYearDays = getLunarYearDays(year);\n    var monthDays = lunarYearDays.monthDays;\n    var days = 0;\n\n    for (var i = 0; i < monthDays.length; i++) {\n      if (i < month) {\n        days += monthDays[i];\n      } else {\n        break;\n      }\n    }\n\n    ;\n    return days + day - 1;\n  }\n\n  ;\n  /**\r\n   * 某年的第n个节气为几日\r\n   * 31556925974.7为地球公转周期，是毫秒\r\n   * 1890年的正小寒点：01-05 16:02:31，1890年为基准点\r\n   * @param {Number} y 公历年\r\n   * @param {Number} n 第几个节气，从0小寒起算\r\n   * 由于农历24节气交节时刻采用近似算法，可能存在少量误差(30分钟内)\r\n   */\n\n  function getTerm(y, n) {\n    var offDate = new Date(31556925974.7 * (y - 1890) + termInfo[n] * 60000 + Date.UTC(1890, 0, 5, 16, 2, 31));\n    return offDate.getUTCDate();\n  }\n\n  ;\n  /**\r\n   * 获取公历年一年的二十四节气\r\n   * 返回key:日期，value:节气中文名\r\n   */\n\n  function getYearTerm(year) {\n    var res = {};\n    var month = 0;\n\n    for (var i = 0; i < 24; i++) {\n      var day = getTerm(year, i);\n      if (i % 2 == 0) month++;\n      res[formateDayD4(month - 1, day)] = DATA.solarTerm[i];\n    }\n\n    return res;\n  }\n\n  ;\n  /**\r\n   * 获取生肖\r\n   * @param {Number} year 干支所在年（默认以立春前的公历年作为基数）\r\n   */\n\n  function getYearZodiac(year) {\n    var num = year - 1890 + 25; //参考干支纪年的计算，生肖对应地支\n\n    return DATA.zodiac[num % 12];\n  }\n\n  ;\n  /**\r\n   * 计算天干地支\r\n   * @param {Number} num 60进制中的位置(把60个天干地支，当成一个60进制的数)\r\n   */\n\n  function cyclical(num) {\n    return DATA.heavenlyStems[num % 10] + DATA.earthlyBranches[num % 12];\n  }\n  /**\r\n   * 获取干支纪年\r\n   * @param {Number} year 干支所在年\r\n   * @param {Number} offset 偏移量，默认为0，便于查询一个年跨两个干支纪年（以立春为分界线）\r\n   */\n\n\n  function getLunarYearName(year, offset) {\n    offset = offset || 0; //1890年1月小寒（小寒一般是1月5或6日）以前为己丑年，在60进制中排25\n\n    return cyclical(year - 1890 + 25 + offset);\n  }\n\n  ;\n  /**\r\n   * 获取干支纪月\r\n   * @param {Number} year,month 公历年，干支所在月\r\n   * @param {Number} offset 偏移量，默认为0，便于查询一个月跨两个干支纪月（有立春的2月）\r\n   */\n\n  function getLunarMonthName(year, month, offset) {\n    offset = offset || 0; //1890年1月小寒以前为丙子月，在60进制中排12\n\n    return cyclical((year - 1890) * 12 + month + 12 + offset);\n  }\n\n  ;\n  /**\r\n   * 获取干支纪日\r\n   * @param {Number} year,month,day 公历年，月，日\r\n   */\n\n  function getLunarDayName(year, month, day) {\n    //当日与1890/1/1 相差天数\n    //1890/1/1与 1970/1/1 相差29219日, 1890/1/1 日柱为壬午日(60进制18)\n    var dayCyclical = Date.UTC(year, month, day) / 86400000 + 29219 + 18;\n    return cyclical(dayCyclical);\n  }\n\n  ;\n  /**\r\n   * 获取公历月份的天数\r\n   * @param {Number} year 公历年\r\n   * @param {Number} month 公历月\r\n   */\n\n  function getSolarMonthDays(year, month) {\n    var monthDays = [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    return monthDays[month];\n  }\n\n  ;\n  /**\r\n   * 判断公历年是否是闰年\r\n   * @param {Number} year 公历年\r\n   */\n\n  function isLeapYear(year) {\n    return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n  }\n\n  ;\n  /*\r\n   * 统一日期输入参数（输入月份从1开始，内部月份统一从0开始）\r\n   */\n\n  function formateDate(year, month, day, _minYear) {\n    var argsLen = arguments.length;\n    var now = new Date();\n    year = argsLen ? parseInt(year, 10) : now.getFullYear();\n    month = argsLen ? parseInt(month - 1, 10) : now.getMonth();\n    day = argsLen ? parseInt(day, 10) || now.getDate() : now.getDate();\n    if (year < (_minYear ? _minYear : minYear + 1) || year > maxYear) return {\n      error: 100,\n      msg: errorCode[100]\n    };\n    return {\n      year: year,\n      month: month,\n      day: day\n    };\n  }\n\n  ;\n  /**\r\n   * 将农历转换为公历\r\n   * @param {Number} year,month,day 农历年，月(1-13，有闰月)，日\r\n   */\n\n  function lunarToSolar(_year, _month, _day) {\n    var inputDate = formateDate(_year, _month, _day);\n    if (inputDate.error) return inputDate;\n    var year = inputDate.year;\n    var month = inputDate.month;\n    var day = inputDate.day;\n    var between = getDaysBetweenZheng(year, month, day); //离正月初一的天数\n\n    var yearData = lunarInfo[year - minYear];\n    var zenMonth = yearData[1];\n    var zenDay = yearData[2];\n    var offDate = new Date(year, zenMonth - 1, zenDay).getTime() + between * 86400000;\n    offDate = new Date(offDate);\n    return {\n      year: offDate.getFullYear(),\n      month: offDate.getMonth() + 1,\n      day: offDate.getDate()\n    };\n  }\n\n  ;\n  /**\r\n   * 将公历转换为农历\r\n   * @param {Number} year,month,day 公历年，月，日\r\n   */\n\n  function solarToLunar(_year, _month, _day) {\n    var inputDate = formateDate(_year, _month, _day, minYear);\n    if (inputDate.error) return inputDate;\n    var year = inputDate.year;\n    var month = inputDate.month;\n    var day = inputDate.day;\n    cacheUtil.setCurrent(year); //立春日期\n\n    var term2 = cacheUtil.get('term2') ? cacheUtil.get('term2') : cacheUtil.set('term2', getTerm(year, 2)); //二十四节气\n\n    var termList = cacheUtil.get('termList') ? cacheUtil.get('termList') : cacheUtil.set('termList', getYearTerm(year));\n    var firstTerm = getTerm(year, month * 2); //某月第一个节气开始日期\n\n    var GanZhiYear = month > 1 || month == 1 && day >= term2 ? year + 1 : year; //干支所在年份\n\n    var GanZhiMonth = day >= firstTerm ? month + 1 : month; //干支所在月份（以节气为界）\n\n    var lunarDate = getLunarByBetween(year, month, day);\n    var lunarLeapMonth = getLunarLeapYear(lunarDate[0]);\n    var lunarMonthName = '';\n\n    if (lunarLeapMonth > 0 && lunarLeapMonth == lunarDate[1]) {\n      lunarMonthName = '闰' + DATA.monthCn[lunarDate[1] - 1] + '月';\n    } else if (lunarLeapMonth > 0 && lunarDate[1] > lunarLeapMonth) {\n      lunarMonthName = DATA.monthCn[lunarDate[1] - 1] + '月';\n    } else {\n      lunarMonthName = DATA.monthCn[lunarDate[1]] + '月';\n    } //农历节日判断\n\n\n    var lunarFtv = '';\n    var lunarMonthDays = getLunarYearDays(lunarDate[0]).monthDays; //除夕\n\n    if (lunarDate[1] == lunarMonthDays.length - 1 && lunarDate[2] == lunarMonthDays[lunarMonthDays.length - 1]) {\n      lunarFtv = lunarFestival['d0100'];\n    } else if (lunarLeapMonth > 0 && lunarDate[1] > lunarLeapMonth) {\n      lunarFtv = lunarFestival[formateDayD4(lunarDate[1] - 1, lunarDate[2])];\n    } else {\n      lunarFtv = lunarFestival[formateDayD4(lunarDate[1], lunarDate[2])];\n    }\n\n    var res = {\n      zodiac: getYearZodiac(GanZhiYear),\n      GanZhiYear: getLunarYearName(GanZhiYear),\n      GanZhiMonth: getLunarMonthName(year, GanZhiMonth),\n      GanZhiDay: getLunarDayName(year, month, day),\n      //放假安排：0无特殊安排，1工作，2放假\n      worktime: worktime['y' + year] && worktime['y' + year][formateDayD4(month, day)] ? worktime['y' + year][formateDayD4(month, day)] : 0,\n      term: termList[formateDayD4(month, day)],\n      lunarYear: lunarDate[0],\n      lunarMonth: lunarDate[1] + 1,\n      lunarDay: lunarDate[2],\n      lunarMonthName: lunarMonthName,\n      lunarDayName: DATA.dateCn[lunarDate[2] - 1],\n      lunarLeapMonth: lunarLeapMonth,\n      solarFestival: solarFestival[formateDayD4(month, day)],\n      lunarFestival: lunarFtv\n    };\n    return res;\n  }\n\n  ;\n  /**\r\n   * 获取指定公历月份的农历数据\r\n   * return res{Object}\r\n   * @param {Number} year,month 公历年，月\r\n   * @param {Boolean} fill 是否用上下月数据补齐首尾空缺，首例数据从周日开始\r\n   */\n\n  function calendar(_year, _month, fill) {\n    var inputDate = formateDate(_year, _month);\n    if (inputDate.error) return inputDate;\n    var year = inputDate.year;\n    var month = inputDate.month;\n    var calendarData = solarCalendar(year, month + 1, fill);\n\n    for (var i = 0; i < calendarData.monthData.length; i++) {\n      var cData = calendarData.monthData[i];\n      var lunarData = solarToLunar(cData.year, cData.month, cData.day);\n      extend(calendarData.monthData[i], lunarData);\n    }\n\n    return calendarData;\n  }\n\n  ;\n  /**\r\n   * 公历某月日历\r\n   * return res{Object}\r\n   * @param {Number} year,month 公历年，月\r\n   * @param {Boolean} fill 是否用上下月数据补齐首尾空缺，首例数据从周日开始 (7*6阵列)\r\n   */\n\n  function solarCalendar(_year, _month, fill) {\n    var inputDate = formateDate(_year, _month);\n    if (inputDate.error) return inputDate;\n    var year = inputDate.year;\n    var month = inputDate.month;\n    var firstDate = new Date(year, month, 1);\n    var preMonthDays, preMonthData, nextMonthData;\n    var res = {\n      firstDay: firstDate.getDay(),\n      //该月1号星期几\n      monthDays: getSolarMonthDays(year, month),\n      //该月天数\n      monthData: []\n    };\n    res.monthData = creatLenArr(year, month + 1, res.monthDays, 1);\n\n    if (fill) {\n      if (res.firstDay > 0) {\n        //前补\n        var preYear = month - 1 < 0 ? year - 1 : year;\n        var preMonth = month - 1 < 0 ? 11 : month - 1;\n        preMonthDays = getSolarMonthDays(preYear, preMonth);\n        preMonthData = creatLenArr(preYear, preMonth + 1, res.firstDay, preMonthDays - res.firstDay + 1);\n        res.monthData = preMonthData.concat(res.monthData);\n      }\n\n      if (7 * 6 - res.monthData.length != 0) {\n        //后补\n        var nextYear = month + 1 > 11 ? year + 1 : year;\n        var nextMonth = month + 1 > 11 ? 0 : month + 1;\n        var fillLen = 7 * 6 - res.monthData.length;\n        nextMonthData = creatLenArr(nextYear, nextMonth + 1, fillLen, 1);\n        res.monthData = res.monthData.concat(nextMonthData);\n      }\n    }\n\n    return res;\n  }\n\n  ;\n  /**\r\n   * 设置放假安排【对外暴露接口】\r\n   * @param {Object} workData\r\n   */\n\n  function setWorktime(workData) {\n    extend(worktime, workData);\n  }\n\n  ;\n  var LunarCalendar = {\n    solarToLunar: solarToLunar,\n    lunarToSolar: lunarToSolar,\n    calendar: calendar,\n    solarCalendar: solarCalendar,\n    setWorktime: setWorktime,\n    getSolarMonthDays: getSolarMonthDays\n  };\n\n  if (typeof define === 'function') {\n    define(function () {\n      return LunarCalendar;\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = LunarCalendar;\n  } else {\n    window.LunarCalendar = LunarCalendar;\n  }\n\n  ;\n})();","var MILLISECONDS_IN_MINUTE = 60000;\n\nfunction getDateMillisecondsPart(date) {\n  return date.getTime() % MILLISECONDS_IN_MINUTE;\n}\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\n\nexport default function getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());\n  date.setSeconds(0, 0);\n  var hasNegativeUTCOffset = baseTimezoneOffset > 0;\n  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport startOfDay from '../startOfDay/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","export const isEven = number => (number % 2) === 0","import DongGong from './DongGong.json'\nimport { ALAMAC_DAY_HOUR, EB, TWELVE_OFFICER, TWENTY_EIGHT_CONSTELLATION, SIXTY_PILLAR, HS } from '../constants'\nimport { differenceInCalendarDays } from 'date-fns'\n\nexport const getDongGongAdvice = (monthBranch, dayBranch) => {\n    const officerOrder = EB.slice(EB.indexOf(monthBranch)).concat(EB.slice(0, EB.indexOf(monthBranch)));\n    const officerIndex = determineOfficerIndex(officerOrder.indexOf(monthBranch), officerOrder.indexOf(dayBranch));\n    return {\n        ...DongGong[getDongGongAdviceIndex(monthBranch, officerIndex)],\n        officer: TWELVE_OFFICER[officerIndex]\n    }\n}\n\nexport const getDongGongAdviceIndex = (monthBranch, officerIndex) => {\n    \n    const monthOrder = EB.slice(2).concat(EB.slice(0, 2));\n    return monthOrder.indexOf(monthBranch) * 12 + officerIndex;\n}\n\nexport const determineOfficerIndex = (monthBranchNumber, dayBranchNumber) => {\n    var distance = dayBranchNumber - monthBranchNumber;\n    if(distance < 0) {\n        distance = 12 + distance;\n    }\n    return distance;\n}\n\nexport const isYearBreaker = (yearBranch, dayBranch) => {\n    return isClash(dayBranch, yearBranch)\n}\n\nexport const isMonthBreaker = (monthBranch, dayBranch) => {\n    return isClash(dayBranch, monthBranch)\n}\n\nexport const isThreeKilling = (yearBranch, dayBranch) => {\n    const lookup = {\n        '申子辰': '寅午戌',\n        '亥卯未': '巳酉丑',\n        '寅午戌': '申子辰',\n        '巳酉丑': '亥卯未'\n    }\n    const threeKillingBranches = Object.keys(lookup).find(e => lookup[e].indexOf(yearBranch) > -1)\n    return threeKillingBranches.indexOf(dayBranch) > -1;\n}\n\nexport const isFourSeperatingDay = (month, date) => {\n    return !!['320', '620', '920', '1221'].find(e => e === `${month}${date}`)\n}\n\nexport const isFourExtinctDay = (month, date) => {\n    return !!['23', '55', '88', '117'].find(e => e === `${month}${date}`)\n}\n\nexport const isClash = (branch1, branch2) => {\n    const b1 = EB.indexOf(branch1);\n    const b2 = EB.indexOf(branch2);\n    return Math.abs(b1 - b2) === 6\n}\n\nexport const getConstellation = (date) => {\n    const diff = differenceInCalendarDays(date, new Date(2007, 1, 1))\n    return TWENTY_EIGHT_CONSTELLATION[diff % 28];\n}\n\nexport const isNoWealthDay = (yearPillar, dayPillar) => {\n    const lookup = ['寅','卯','巳','午','巳','午','申','酉','亥','子']\n    const emptyBranch = getEmptinessBranch(yearPillar)\n    const emptyStem = lookup.reduce((a, n, i) => {\n        if(emptyBranch.includes(n)) {\n            a.push(HS[i])\n        }\n        return a;\n    }, [])\n\n    const distanceToGui = 9 - HS.findIndex(e => e === yearPillar.substr(0, 1));\n    const pillarIndex = SIXTY_PILLAR.findIndex(e => e === yearPillar) + distanceToGui\n    \n    \n    return SIXTY_PILLAR.slice(pillarIndex - 9, pillarIndex + distanceToGui)\n    .filter(e => emptyStem.includes(e.substr(0, 1))).includes(dayPillar);\n}\n\nexport const getEmptinessBranch = (pillar) => {\n    const iterate = [...SIXTY_PILLAR, ...SIXTY_PILLAR];\n    const distanceToGui = 9 - HS.findIndex(e => e === pillar.substr(0, 1));\n    const pillarIndex = iterate.findIndex(e => e === pillar) + distanceToGui\n    const pillar1 = iterate[pillarIndex + 1];\n    const pillar2 = iterate[pillarIndex + 2];\n    return [pillar1.substr(1, 1), pillar2.substr(1, 1)]\n}\n\nexport const getAlamacHourStar = (dayPillar) => {\n    return ALAMAC_DAY_HOUR[dayPillar]\n}\n\nexport const getHorseStar = (branch) => {\n    const lookup = {\n        '申子辰': '寅',\n        '亥卯未': '巳',\n        '寅午戌': '申',\n        '巳酉丑': '亥'\n    }\n    const key = Object.keys(lookup).find(k => {\n        return k.indexOf(branch) > -1\n    })\n    return lookup[key];\n}","import LunarCalendar from 'lunar-calendar';\nimport { parseISO, differenceInCalendarDays } from 'date-fns';\nimport { isEven } from '../util/number'\nimport { HS, EB, SIXTY_PILLAR, SOLAR_TERM } from '../constants/';\nimport SolarTerm from './SolarTerm.json'\nimport ClassicalStars from './ClassicalStars.json'\nimport { getEmptinessBranch } from '../DateSelection'\nimport { HIDDEN_STEM } from './constants';\nimport NaYin from './NaYin.json'\n\nexport const getHiddenStem = branch => HIDDEN_STEM[branch];\n\nexport const getSolarTerm = (year, month, day, hour, min) => {\n    \n    const paddedMonth = `${month}`.padStart(2, '0');\n    const paddedDay = `${day}`.padStart(2, '0');\n    const h = `${hour}`.padStart(2, '0');\n    const m = `${min}`.padStart(2, '0');\n\n    const yearMonthString = `${year}${paddedMonth}${paddedDay}T${h}:${m}`;\n    \n    const solarTerm = SolarTerm.slice().reverse().find(e => yearMonthString > e.d);\n    const NextSolarTerm = SolarTerm.find(e => e.d > solarTerm.d);\n\n    const principalSolarTerms = SOLAR_TERM.filter((e, i) => i % 2 === 0)\n    const principalTermForDate = SolarTerm.slice().reverse().find(e => yearMonthString > e.d  && principalSolarTerms.includes(e.s))\n    const ptIndex = principalSolarTerms.findIndex(e => e === principalTermForDate.s);\n    const referencePT = principalSolarTerms.slice(ptIndex).concat(principalSolarTerms.slice(0, ptIndex))\n    const nextPrincipalTermForDate = SolarTerm.find(e => yearMonthString < e.d && e.s === referencePT[1]);\n\n    return { \n        solarTerm: solarTerm.s,\n        transitionDay: solarTerm.d.substr(0, 8) === yearMonthString.substr(0, 8),\n        dayToNextTerm: differenceInCalendarDays(parseISO(NextSolarTerm.d), parseISO(yearMonthString)) + 1,\n        dayToNextPrincipalTerm: differenceInCalendarDays(parseISO(nextPrincipalTermForDate.d), parseISO(yearMonthString)),\n        dayToPreviousPrincipalTerm: differenceInCalendarDays(parseISO(yearMonthString), parseISO(principalTermForDate.d)),\n    }\n}\n\nexport const getPillarSequence = (pillar, length, direction = true) => {\n    \n    const concatPillar = [...Array(Math.ceil(length/60 + 1))].reduce((a, n) => {\n        return [\n            ...a,\n            ...SIXTY_PILLAR\n        ]\n    }, [])\n    const useConcatPillar = direction ? concatPillar : concatPillar.slice().reverse()\n    const pillarIndex = useConcatPillar.indexOf(pillar)\n    return useConcatPillar.slice(pillarIndex, pillarIndex + length)\n}\n\nconst deriveStars = (year, month, day, hour) => {\n    const dayBranch = day.ganzhi.substr(1, 1);\n    const dayStem = day.ganzhi.substr(0, 1);\n    return {\n        classical: {\n            ...ClassicalStars[dayBranch],\n            ...ClassicalStars[dayStem],\n            '空亡': getEmptinessBranch(day.ganzhi).join('')  \n        },\n        blindman: {\n            '空亡': getEmptinessBranch(day.ganzhi).join('')  \n        },\n    }\n}\n\nconst _gregorianToBazi = (year, month, day, hour = 12, min = 0, gender) => {\n    const monthIndex = month - 1;\n    const date = new Date(year, monthIndex, day);\n    const result = LunarCalendar.calendar(date.getFullYear(), date.getMonth() + 1, date.getDate());\n    const found = result.monthData.findIndex(e => e.year === Number(year) && e.month === Number(month) && e.day === Number(day))\n    const { GanZhiYear, GanZhiMonth, GanZhiDay } = result.monthData[found];\n    const GanZhiHour = calculateHour(GanZhiDay.substr(0, 1), hour);\n    return found > -1 && {\n        ...result.monthData[found],\n        GanZhiYear, \n        GanZhiMonth, \n        GanZhiDay,\n        GanZhiHour\n    };\n}\n\nexport const gregorianToBazi = (year, month, day, hour, min = 0, gender) => {\n\n    const westernAge = new Date(Date.now()).getFullYear() - year;\n    const bazi = _gregorianToBazi(year, month, day, hour, min, gender);\n    if(bazi) {\n        let { GanZhiYear, GanZhiMonth, GanZhiDay, GanZhiHour } = bazi;\n        const termInfo = getSolarTerm(year, month, day, hour, min);\n        const forward = (gender === 'M' && isEven(SIXTY_PILLAR.indexOf(GanZhiYear))) || (gender === 'F' && !isEven(SIXTY_PILLAR.indexOf(GanZhiYear)))\n        const startAgeQuotient = forward ? Math.floor(termInfo.dayToNextPrincipalTerm / 3) : Math.floor(termInfo.dayToPreviousPrincipalTerm / 3);\n        const remainder = forward ? termInfo.dayToNextPrincipalTerm % 3 : termInfo.dayToPreviousPrincipalTerm % 3;\n        const startWesternAge = remainder === 2 ? startAgeQuotient + 1 : startAgeQuotient;\n        \n        const tenYearCycle = getPillarSequence(GanZhiMonth, 11, forward).slice(1, 10);\n        const hundredYear = [\"小寒\", \"大寒\"].includes(termInfo.solarTerm) \n        ? getPillarSequence(GanZhiYear, 101).slice(1, 100) : getPillarSequence(GanZhiYear, 100);\n        const monthBazi = _gregorianToBazi(year, month, 16)\n        const monthCycle = getPillarSequence(monthBazi.GanZhiMonth, 1200);\n\n        GanZhiYear = convertGanZhi(GanZhiYear);\n        GanZhiMonth = convertGanZhi(GanZhiMonth);\n        GanZhiDay = convertGanZhi(GanZhiDay);\n        GanZhiHour = convertGanZhi(GanZhiHour);\n\n        const activeLuckPillarIndex =  westernAge >= startWesternAge ? \n        Math.floor((westernAge - startWesternAge) / 10) : -1;\n\n        return ({\n            westernAge,\n            startWesternAge,\n            currentYearPillar: hundredYear[westernAge],\n            currentLuckPillar: tenYearCycle[activeLuckPillarIndex],\n            westernYear: year,\n            westernMonth: month,\n            westernDay: day,\n            ...termInfo,\n            ...bazi,\n            GanZhiYear, \n            GanZhiMonth, \n            GanZhiDay, \n            GanZhiHour,\n            startAge: Math.round(Math.abs(startWesternAge)),\n            tenYearCycle: tenYearCycle,\n            hundredYear: hundredYear.map((e, i) => ({ \n                pillar: e,\n                year: year + i\n            })),\n            monthCycle,\n            stars: deriveStars(GanZhiYear, GanZhiMonth, GanZhiDay, GanZhiHour),\n            dayNayin: NaYin[GanZhiDay.ganzhi]\n        });\n    } else {\n        return \"\";\n    }\n}\n\nconst convertGanZhi = (ganzhi) => {\n    const ganIndex = HS.indexOf(ganzhi.substr(0, 1));\n    const zhiIndex = EB.indexOf(ganzhi.substr(1, 1));\n    return {ganzhi: ganzhi, ganIndex, zhiIndex};\n}\n\nexport const dateToBazi = (date, gender) => {\n    return gregorianToBazi(date.getFullYear(), date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), gender)\n}\n\nconst calculateHour = (dayGan, hour) => {\n    const hourBranchIndex = Math.floor(((hour + 1)/2) % 12);\n\n    \n    const dayStemIndex = HS.findIndex(e => e === dayGan);\n\n    const hourStemIndex = calculateHourStem(dayStemIndex + 1, hourBranchIndex + 1, hour);\n    const gan = HS[hourStemIndex];\n    const zhi = EB[hourBranchIndex];\n\n    return gan + zhi;\n}\n\nconst  calculateHourStem = (dayStemNumber, hourBranchNumber, hour) => {\n    if(hour === 23) {\n        dayStemNumber = dayStemNumber + 1;\n    }\n    var hourStemIndex =(dayStemNumber * 2) + (hourBranchNumber - 2);\n    return (hourStemIndex > 10) ? ((hourStemIndex - 1) % 10) : hourStemIndex - 1;\n}"],"sourceRoot":""}