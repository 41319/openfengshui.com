{"version":3,"sources":["webpack:///./node_modules/date-fns/esm/addDays/index.js","webpack:///./src/pages/qmdj/year.js"],"names":["addDays","dirtyDate","dirtyAmount","arguments","date","amount","isNaN","Date","NaN","setDate","getDate","handleSearch","searchFormation","palace","result","chart","now","searchEndDate","diff","differenceInCalendarDays","Array","keys","map","d","compareDate","key","format","DEAULT_DATE_FORMAT","ChartList","reduce","a","e","formationIndex","findIndex","o","structure","hour","includes","DIRECTION","i","concat","f","ee","BRANCH","indexOf","substr","toString","padStart","n","search","Ju","filter","v","find","g","display","square","parseISO","DATETIME_FORMAT","heaven","star","door","god","earth","getChart","dateObject","updateChart","getHours","chartDate","ch","Math","floor","Home","heading","onDateChanged"],"mappings":"8FAAA,0EA0Be,SAASA,EAAQC,EAAWC,GACzC,YAAa,EAAGC,WAChB,IAAIC,EAAO,YAAOH,GACdI,EAAS,YAAUH,GAEvB,OAAII,MAAMD,GACD,IAAIE,KAAKC,KAGbH,GAKLD,EAAKK,QAAQL,EAAKM,UAAYL,GACvBD,GAJEA,I,oMCCLO,EAAe,SAACC,EAAiBC,GACrC,IAEMC,EA/BO,SAACC,EAAOF,GACrB,IAAMG,EAAM,IAAIT,KACVU,EAAgBjB,YAAQgB,EAAK,GAC7BE,EAAOC,YAAyBF,EAAeD,GACrD,OAAO,YAAII,MAAMF,GAAMG,QAAQC,KAAI,SAAAC,GAC/B,IAAMC,EAAcxB,YAAQgB,EAAKO,GAC3BE,EAAMC,YAAOF,EAAaG,KAEhC,OAAOC,GAAaA,EAAUH,GAC7BI,QAAO,SAACC,EAAGC,GACR,IAAMC,EAAiBjB,EAAMkB,WAAU,SAAAC,GAAC,OAAIH,EAAEI,YAAcD,EAAEC,WAAaJ,EAAEK,OAASF,EAAEE,QACxF,OAAGJ,GAAkB,GAAKnB,EAAOwB,SAASC,IAAUvB,EAAMiB,GAAgBD,EAAEQ,IACjET,EAAEU,OAAO,CAAC,OAAD,UACTT,EADS,CAEZU,EAAE,OAAD,UAAO1B,EAAMiB,GAAgBD,EAA7B,CAAgCR,EAAGe,IAAUN,SAG/CF,IAET,IACDR,KAAI,SAAAoB,GACD,IAAMN,EAA8C,EAAvCO,IAAOC,QAAQF,EAAGN,KAAKS,OAAO,EAAG,IAC9C,OAAO,OAAP,UAAYH,EAAZ,CAAgBtC,KAASqB,EAAL,IAAYW,EAAKU,WAAWC,SAAS,EAAG,KAAxC,iBAG3BlB,QAAO,SAACC,EAAGkB,GAAJ,OAAUlB,EAAEU,OAAOQ,KAAI,IAMhBC,CAFDC,EAAGC,QAAO,SAAAC,GAAC,OAAIA,EAAErC,MAAMsC,MAAK,SAAAC,GAAC,OAAIA,EAAEb,GAAKa,EAAEb,EAAEG,QAAQhC,IAAoB,QACrFU,KAAI,SAAAS,GAAC,MAAK,CAAEI,UAAWJ,EAAEI,UAAWC,KAAML,EAAEK,KAAML,EAAE,OAAD,UAAOA,EAAEhB,MAAMsC,MAAK,SAAAtB,GAAC,OAAIA,EAAEU,IAAM7B,KAAjC,CAAmD2B,EAAGR,EAAEhB,MAAMkB,WAAU,SAAAF,GAAC,OAAIA,EAAEU,IAAM7B,WAC5GC,GACvB0C,EAAU,SAACH,EAAGI,GAAJ,OAAkB9B,YAAO+B,YAAS,GAAGL,GAAMM,KAA3C,IAA+DF,EAAOG,OAAtE,IAAgFH,EAAOI,KAAvF,IAA+FJ,EAAOK,KAAtG,IAA8GL,EAAOM,IAArH,IAA4HN,EAAOO,MAAnI,IAA4IzB,IAAUkB,EAAOjB,IAC7K,OAAOzB,EAAOQ,KAAI,SAAC8B,EAAGb,GAAJ,wBAAgBa,EAAhB,CAAmBG,QAASA,EAAQH,EAAEhD,KAAMgD,EAAEX,SAG5DuB,EAAW,SAACC,EAAYC,GAE5B,IAAM9B,EAAO6B,EAAWE,WAClBC,EAAY1C,YAAOuC,EAAY,YAC/BI,EAAKzC,EAAUwC,GAAWE,KAAKC,MAAOnC,EAAQ,IAEpD8B,EADmBhB,EAAGG,MAAK,SAAAtB,GAAC,OAAIA,EAAEI,YAAckC,EAAGlC,WAAaJ,EAAEK,OAASiC,EAAGjC,UAajEoC,UATF,WAEX,OAAO,kBAAC,UAAD,CACLC,QAAQ,4BACR9D,aAAcA,EACd+D,cAAeV","file":"component---src-pages-qmdj-year-js-639af1be56836dec4440.js","sourcesContent":["import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * var result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import React from \"react\"\nimport Layout from '../../containers/layout'\nimport Container from '../../containers/QiMen'\nimport { Heading } from 'grommet';\nimport ChartList from '../../cm-lib/reference/DetailChart.json'\nimport Ju from '../../cm-lib/reference/Ju.json'\nimport { DEAULT_DATE_FORMAT, BRANCH, DATETIME_FORMAT, DIRECTION } from '../../cm-lib/constants'\nimport { format, parseISO, addDays, differenceInCalendarDays } from 'date-fns';\nimport Common from './common'\n\nconst search = (chart, palace) => {\n  const now = new Date();\n  const searchEndDate = addDays(now, 5);\n  const diff = differenceInCalendarDays(searchEndDate, now);\n  return [...Array(diff).keys()].map(d => {\n      const compareDate = addDays(now, d);\n      const key = format(compareDate, DEAULT_DATE_FORMAT);\n     \n      return ChartList && ChartList[key]\n      .reduce((a, e) => {\n          const formationIndex = chart.findIndex(o => e.structure === o.structure && e.hour === o.hour)\n          if(formationIndex > -1 && palace.includes(DIRECTION[chart[formationIndex].e.i])) {\n              return a.concat([{\n                  ...e,\n                  f: { ...chart[formationIndex].e, d: DIRECTION[formationIndex] }\n              }])\n          }\n          return a;\n      }\n      , [])\n      .map(ee =>  {\n          const hour = BRANCH.indexOf(ee.hour.substr(1, 1)) * 2;\n          return { ...ee, date: `${key}T${hour.toString().padStart(2, '0')}:00:00`};\n      })\n  })\n  .reduce((a, n) => a.concat(n), [])\n}\n\nconst handleSearch = (searchFormation, palace) => {\n  const found = Ju.filter(v => v.chart.find(g => g.f && g.f.indexOf(searchFormation) > -1 ))\n  .map(e => ({ structure: e.structure, hour: e.hour, e: { ...e.chart.find(e => e.f === searchFormation), i: e.chart.findIndex(e => e.f === searchFormation) }}))\n  const result = search(found, palace);\n  const display = (v, square) => `${format(parseISO(`${v}`), DATETIME_FORMAT)} ${square.heaven} ${square.star} ${square.door} ${square.god} ${square.earth} ${DIRECTION[square.i]}`\n  return result.map((v, i) => ({ ...v, display: display(v.date, v.f)}))\n}\n\nconst getChart = (dateObject, updateChart) => {\n    \n  const hour = dateObject.getHours();\n  const chartDate = format(dateObject, 'yyyyMMdd')\n  const ch = ChartList[chartDate][Math.floor((hour) / 2)];\n  const foundChart = Ju.find(e => e.structure === ch.structure && e.hour === ch.hour);\n  updateChart(foundChart);\n}  \n\nconst Home = () => {\n\n  return <Common\n    heading=\"Qi Men Dun Jia Year Chart\"\n    handleSearch={handleSearch} \n    onDateChanged={getChart}\n  />\n}\n\nexport default Home\n"],"sourceRoot":""}