{"version":3,"sources":["webpack:///./src/pages/qmdj/hour.js","webpack:///./node_modules/date-fns/esm/getDaysInMonth/index.js","webpack:///./src/components/DateTimePicker/index.js","webpack:///./node_modules/date-fns/esm/setMinutes/index.js","webpack:///./node_modules/date-fns/esm/setHours/index.js","webpack:///./node_modules/date-fns/esm/setDate/index.js","webpack:///./node_modules/date-fns/esm/setMonth/index.js","webpack:///./node_modules/date-fns/esm/setYear/index.js"],"names":["queryString","require","isBrowser","window","Home","qs","parse","location","search","useState","description","setDescription","ju","setJu","profile","setProfile","mode","setMode","dt","isNaN","parseISO","getTime","Date","useEffect","foundChart","getHourChart","map","e","title","label","chartType","onClick","date","format","assign","chart","initialDate","heading","onSquarePressed","categories","executionlist","data","filter","heaven","earth","i","rating","dateObject","direction","color","align","background","fill","pad","more","getDaysInMonth","dirtyDate","arguments","year","getFullYear","monthIndex","getMonth","lastDayOfMonth","setFullYear","setHours","getDate","DateTimePicker","useDateObject","setDateObject","setYearText","month","setMonthText","day","setDayText","hour","setHour","min","setMin","dateObj","dirtyMinutes","requiredArgs","toDate","minutes","toInteger","setMinutes","dirtyHours","hours","dirtyDayOfMonth","dayOfMonth","setDate","dirtyMonth","dateWithDesiredMonth","daysInMonth","setMonth","Math","dirtyYear","NaN","setYear","alert","console","log","Box","bottom","TextInput","focusIndicator","value","onChange","event","target","Button"],"mappings":"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","file":"component---src-pages-qmdj-hour-js-1a25545456236bd5f7c9.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport Layout from '../../containers/layout'\nimport { Accordion, Box, Text, AccordionPanel } from 'grommet';\nimport ChartList from '../../cm-lib/reference/DetailChart.json'\nimport Ju from '../../cm-lib/reference/Ju.json'\nimport { DEAULT_DATE_FORMAT, BRANCH, DATETIME_FORMAT, DIRECTION } from '../../cm-lib/constants'\nimport { getZhiRunHourChart as getHourChart } from '../../cm-lib/QiMen'\nimport { format, parseISO, addDays, differenceInCalendarDays } from 'date-fns';\nimport Common from './common'\nimport data from '../../data/execution.json'\nimport DateTimePicker from '../../components/DateTimePicker'\nimport { getQueryString, assign } from '../../helpers'\nconst queryString = require('query-string');\n\n\nconst isBrowser = typeof window !== `undefined`\n\nconst search = (chart, palace) => {\n  const now = new Date();\n  const searchEndDate = addDays(now, 5);\n  const diff = differenceInCalendarDays(searchEndDate, now);\n  return [...Array(diff).keys()].map(d => {\n      const compareDate = addDays(now, d);\n      const key = format(compareDate, DEAULT_DATE_FORMAT);\n     \n      return ChartList && ChartList[key]\n      .reduce((a, e) => {\n          const formationIndex = chart.findIndex(o => e.structure === o.structure && e.hour === o.hour)\n          if(formationIndex > -1 && palace.includes(DIRECTION[chart[formationIndex].e.i])) {\n              return a.concat([{\n                  ...e,\n                  f: { ...chart[formationIndex].e, d: DIRECTION[formationIndex] }\n              }])\n          }\n          return a;\n      }\n      , [])\n      .map(ee =>  {\n          const hour = BRANCH.indexOf(ee.hour.substr(1, 1)) * 2;\n          return { ...ee, date: `${key}T${hour.toString().padStart(2, '0')}:00:00`};\n      })\n  })\n  .reduce((a, n) => a.concat(n), [])\n}\n\nconst handleSearch = (searchFormation, palace) => {\n  const found = Ju.filter(v => v.chart.find(g => g.f && g.f.indexOf(searchFormation) > -1 ))\n  .map(e => ({ structure: e.structure, hour: e.hour, e: { ...e.chart.find(e => e.f === searchFormation), i: e.chart.findIndex(e => e.f === searchFormation) }}))\n  const result = search(found, palace);\n  const display = (v, square) => `${format(parseISO(`${v}`), DATETIME_FORMAT)} ${square.heaven} ${square.star} ${square.door} ${square.god} ${square.earth} ${DIRECTION[square.i]}`\n  return result.map((v, i) => ({ ...v, display: display(v.date, v.f)}))\n}\n\nconst Home = () => {\n\n  const qs = isBrowser && queryString.parse(window && window.location.search)\n  const [description, setDescription] = useState(null)\n  const [ju, setJu] = useState(null)\n  const [profile, setProfile] = useState(null)\n  const [mode, setMode] = useState(qs.mode || 'Profile')\n  const dt = isNaN(parseISO(qs.dt).getTime()) ? new Date() : parseISO(qs.dt)\n\n  useEffect(() => {\n    const foundChart = getHourChart(dt)\n    setJu(foundChart.ju)\n    setProfile(foundChart.profile && foundChart.profile.map(e => ({\n      title: `${e.title}: ${e.label}`,\n      description: e.description\n    })))\n\n  }, [])\n  useEffect(() => {\n    if(mode === 'Profile') {\n      profile && setDescription(profile)\n    } else {\n      setDescription([])\n    }\n    \n  }, [mode, profile])\n\n  return <Layout>\n    <Common\n    chartType=\"Hour Chart\"\n    onClick={date => {\n      const dt = format(date, 'yyyy-MM-dd HH:mm')\n      isBrowser && window.location.assign(`?dt=${dt}&mode=${mode}`)\n    }}\n    mode={mode}\n    chart={ju}\n    initialDate={dt}\n    heading=\"Qi Men Dun Jia Hour Chart\"\n\n    onSquarePressed={(e) => {\n      const categories = [\n        'Business',\n        'Relationship',\n        'Education',\n        'Health',\n        'Lesuire'\n      ]\n      const executionlist = data.filter(search => e.heaven === search.heaven && e.earth === search.earth)\n      .map((e, i) => ({\n        title: `${e.heaven}-${e.earth} ${categories[i]}: ${e.rating}`,\n        description: e.description\n      }))\n      mode === 'Execution' && setDescription(executionlist)\n    }}\n  />\n      <DateTimePicker     \n    onClick={date => {\n      const dt = format(date, 'yyyy-MM-dd HH:mm')\n      assign(`?dt=${dt}`)\n    }} \n    dateObject={dt}\n    />\n  <br />\n    <Box direction=\"row-responsive\">\n      {\n        [{ color: 'status-warning', mode: 'Profile' }, \n        { color: 'status-ok', mode: 'Execution' }].map(e => <Box \n          onClick={() => setMode(e.mode)}\n          align=\"center\" color=\"white\"  background={e.mode === mode ? 'brand' : 'black'} fill=\"horizontal\" pad=\"small\">\n          <Text color=\"white\"> { e.mode }</Text>\n        </Box>)\n      }\n    </Box>\n\n  <Accordion>\n    {\n      description && description.map((e, i) => <AccordionPanel \n      label={e.title}>\n      {\n        <Box pad=\"medium\" background=\"light-2\">\n        <Text> { ((mode !== 'Execution') || (mode === 'Execution' && qs.more)) && e.description } </Text>\n          </Box>\n      }\n    </AccordionPanel>)\n    }\n  </Accordion>\n  </Layout>\n}\n\nexport default Home\n","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getDaysInMonth\n * @category Month Helpers\n * @summary Get the number of days in a month of the given date.\n *\n * @description\n * Get the number of days in a month of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the number of days in a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // How many days are in February 2000?\n * var result = getDaysInMonth(new Date(2000, 1))\n * //=> 29\n */\n\nexport default function getDaysInMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var monthIndex = date.getMonth();\n  var lastDayOfMonth = new Date(0);\n  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);\n  lastDayOfMonth.setHours(0, 0, 0, 0);\n  return lastDayOfMonth.getDate();\n}","import React, { useState, useEffect } from 'react';\nimport { TextInput, Box, Button  } from 'grommet';\nimport { format, setMinutes, setHours, setYear, setMonth, setDate } from 'date-fns';\n\nconst DateTimePicker = ({ label = 'Get Chart', dateObject, onClick }) => {\n    const [useDateObject, setDateObject] = useState(dateObject || new Date())\n    const [year, setYearText] = useState(format(useDateObject, 'yyyy'));\n    const [month, setMonthText] = useState(format(useDateObject, 'M'));\n    const [day, setDayText] = useState(format(useDateObject, 'd'));\n    const [hour, setHour] = useState(format(useDateObject, 'H'))\n    const [min, setMin] = useState(format(useDateObject, 'm'))\n\n    useEffect(() => {\n        let dateObj = new Date();\n        dateObj = setYear(dateObj, year)\n        dateObj = setMonth(dateObj, month - 1)\n        dateObj = setDate(dateObj, day)\n        dateObj = setHours(dateObj, hour)\n        dateObj = setMinutes(dateObj, min)\n\n        if(isNaN(dateObj.getTime())) {\n            alert('invalid date')\n        } else {\n            console.log(dateObj)\n            setDateObject(dateObj)\n        }\n    }, [hour, min, year, month, day])\n\n    return <>\n            <Box\n            direction=\"row\"\n            pad={{\n                bottom: \"small\"\n            }}\n            >\n                <TextInput focusIndicator value={year} onChange={event => setYearText(event.target.value) } />\n                <TextInput focusIndicator value={month} onChange={event => setMonthText(event.target.value)} />\n                <TextInput focusIndicator value={day} onChange={event => setDayText(event.target.value)} />\n                <TextInput focusIndicator value={hour} onChange={event => setHour(event.target.value)} />\n                <TextInput focusIndicator value={min} onChange={event => setMin(event.target.value)} />\n            </Box>\n\n        <Box align=\"end\">\n                <Button \n                onClick={() => {\n                    onClick && onClick(useDateObject)\n                }}\n                label={label}\n                />\n        </Box>\n    </>;\n}\n\nexport default DateTimePicker;","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setMinutes\n * @category Minute Helpers\n * @summary Set the minutes to the given date.\n *\n * @description\n * Set the minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} minutes - the minutes of the new date\n * @returns {Date} the new date with the minutes set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 45 minutes to 1 September 2014 11:30:40:\n * var result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)\n * //=> Mon Sep 01 2014 11:45:40\n */\n\nexport default function setMinutes(dirtyDate, dirtyMinutes) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var minutes = toInteger(dirtyMinutes);\n  date.setMinutes(minutes);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setHours\n * @category Hour Helpers\n * @summary Set the hours to the given date.\n *\n * @description\n * Set the hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} hours - the hours of the new date\n * @returns {Date} the new date with the hours set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 4 hours to 1 September 2014 11:30:00:\n * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)\n * //=> Mon Sep 01 2014 04:30:00\n */\n\nexport default function setHours(dirtyDate, dirtyHours) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var hours = toInteger(dirtyHours);\n  date.setHours(hours);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setDate\n * @category Day Helpers\n * @summary Set the day of the month to the given date.\n *\n * @description\n * Set the day of the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} dayOfMonth - the day of the month of the new date\n * @returns {Date} the new date with the day of the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set the 30th day of the month to 1 September 2014:\n * var result = setDate(new Date(2014, 8, 1), 30)\n * //=> Tue Sep 30 2014 00:00:00\n */\n\nexport default function setDate(dirtyDate, dirtyDayOfMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dayOfMonth = toInteger(dirtyDayOfMonth);\n  date.setDate(dayOfMonth);\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport getDaysInMonth from '../getDaysInMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setMonth\n * @category Month Helpers\n * @summary Set the month to the given date.\n *\n * @description\n * Set the month to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} month - the month of the new date\n * @returns {Date} the new date with the month set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set February to 1 September 2014:\n * var result = setMonth(new Date(2014, 8, 1), 1)\n * //=> Sat Feb 01 2014 00:00:00\n */\n\nexport default function setMonth(dirtyDate, dirtyMonth) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var month = toInteger(dirtyMonth);\n  var year = date.getFullYear();\n  var day = date.getDate();\n  var dateWithDesiredMonth = new Date(0);\n  dateWithDesiredMonth.setFullYear(year, month, 15);\n  dateWithDesiredMonth.setHours(0, 0, 0, 0);\n  var daysInMonth = getDaysInMonth(dateWithDesiredMonth); // Set the last day of the new month\n  // if the original date was the last day of the longer month\n\n  date.setMonth(month, Math.min(day, daysInMonth));\n  return date;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name setYear\n * @category Year Helpers\n * @summary Set the year to the given date.\n *\n * @description\n * Set the year to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} year - the year of the new date\n * @returns {Date} the new date with the year set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set year 2013 to 1 September 2014:\n * var result = setYear(new Date(2014, 8, 1), 2013)\n * //=> Sun Sep 01 2013 00:00:00\n */\n\nexport default function setYear(dirtyDate, dirtyYear) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var year = toInteger(dirtyYear); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  }\n\n  date.setFullYear(year);\n  return date;\n}"],"sourceRoot":""}