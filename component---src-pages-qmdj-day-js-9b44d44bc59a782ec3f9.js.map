{"version":3,"sources":["webpack:///./node_modules/date-fns/esm/addDays/index.js","webpack:///./src/pages/qmdj/day.js"],"names":["addDays","dirtyDate","dirtyAmount","arguments","date","amount","isNaN","Date","NaN","setDate","getDate","handleSearch","searchFormation","palace","result","chart","now","searchEndDate","SEARCH_PERIOD_IN_DAY","diff","differenceInCalendarDays","Array","keys","map","d","compareDate","key","format","DEAULT_DATE_FORMAT","getDayChart","getFullYear","getMonth","reduce","a","e","formationIndex","findIndex","o","structure","pillar","hour","includes","DIRECTION","i","concat","f","ee","n","search","Ju","filter","v","find","g","indexOf","display","square","parseISO","DATETIME_FORMAT","heaven","star","door","god","earth","getChart","dateObject","updateChart","y","m","ch","Home","heading","onDateChanged"],"mappings":"8FAAA,0EA0Be,SAASA,EAAQC,EAAWC,GACzC,YAAa,EAAGC,WAChB,IAAIC,EAAO,YAAOH,GACdI,EAAS,YAAUH,GAEvB,OAAII,MAAMD,GACD,IAAIE,KAAKC,KAGbH,GAKLD,EAAKK,QAAQL,EAAKM,UAAYL,GACvBD,GAJEA,I,0LCALO,EAAe,SAACC,EAAiBC,GAGrC,IAEMC,EAjCO,SAACC,EAAOF,GACrB,IAAMG,EAAM,IAAIT,KACVU,EAAgBjB,YAAQgB,EAAKE,KAC7BC,EAAOC,YAAyBH,EAAeD,GACrD,OAAO,YAAIK,MAAMF,GAAMG,QAAQC,KAAI,SAAAC,GAC/B,IAAMC,EAAczB,YAAQgB,EAAKQ,GAC3BE,EAAMC,YAAOF,EAAaG,KAChC,MAAO,CAACC,YAAYJ,EAAYK,cAAeL,EAAYM,WAAa,EAAGN,EAAYf,YACtFsB,QAAO,SAACC,EAAGC,GACR,IAAMC,EAAiBpB,EAAMqB,WAAU,SAAAC,GAAC,OAAIH,EAAEI,YAAcD,EAAEC,WAAaJ,EAAEK,SAAWF,EAAEG,QAE1F,OAAGL,GAAkB,GAAKtB,EAAO4B,SAASC,IAAU3B,EAAMoB,GAAgBD,EAAES,IAEjEV,EAAEW,OAAO,CAAC,OAAD,UACTV,EADS,CAEZW,EAAE,OAAD,UAAO9B,EAAMoB,GAAgBD,EAA7B,CAAgCV,EAAGkB,IAAUP,SAG/CF,IAET,IACDV,KAAI,SAAAuB,GACD,OAAO,OAAP,UAAYA,EAAZ,CAAgB1C,KAASsB,EAAL,oBAG3BM,QAAO,SAACC,EAAGc,GAAJ,OAAUd,EAAEW,OAAOG,KAAI,IAQhBC,CAFDC,EAAGC,QAAO,SAAAC,GAAC,OAAIA,EAAEpC,MAAMqC,MAAK,SAAAC,GAAC,OAAIA,EAAER,GAAKQ,EAAER,EAAES,QAAQ1C,IAAoB,QACrFW,KAAI,SAAAW,GAAC,MAAK,CAAEI,UAAWJ,EAAEI,UAAWE,KAAMN,EAAEM,KAAMN,EAAE,OAAD,UAAOA,EAAEnB,MAAMqC,MAAK,SAAAlB,GAAC,OAAIA,EAAEW,IAAMjC,KAAjC,CAAmD+B,EAAGT,EAAEnB,MAAMqB,WAAU,SAAAF,GAAC,OAAIA,EAAEW,IAAMjC,WAC5GC,GACvB0C,EAAU,SAACJ,EAAGK,GAAJ,OAAkB7B,YAAO8B,YAAS,GAAGN,GAAMO,KAA3C,IAA+DF,EAAOG,OAAtE,IAAgFH,EAAOI,KAAvF,IAA+FJ,EAAOK,KAAtG,IAA8GL,EAAOM,IAArH,IAA4HN,EAAOO,MAAnI,IAA4IrB,IAAUc,EAAOb,IAC7K,OAAO7B,EAAOS,KAAI,SAAC4B,EAAGR,GAAJ,wBAAgBQ,EAAhB,CAAmBI,QAASA,EAAQJ,EAAE/C,KAAM+C,EAAEN,SAG5DmB,EAAW,SAACC,EAAYC,GAE5B,IAAMC,EAAIxC,YAAOsC,EAAY,QACvBG,EAAIzC,YAAOsC,EAAY,KACvBzC,EAAIG,YAAOsC,EAAY,KACvBI,EAAKxC,YAAYsC,EAAGC,EAAG5C,GAE7B0C,EADmBjB,EAAGG,MAAK,SAAAlB,GAAC,OAAIA,EAAEI,YAAc+B,EAAG/B,WAAaJ,EAAEM,OAAS6B,EAAG9B,YAajE+B,UATF,WAEX,OAAO,kBAAC,IAAD,KAAQ,kBAAC,UAAD,CACbC,QAAQ,2BACR5D,aAAcA,EACd6D,cAAeR","file":"component---src-pages-qmdj-day-js-9b44d44bc59a782ec3f9.js","sourcesContent":["import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * var result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import React from \"react\"\nimport Layout from '../../containers/layout'\nimport Ju from '../../cm-lib/reference/Ju.json'\nimport { DEAULT_DATE_FORMAT, DATETIME_FORMAT, DIRECTION, SEARCH_PERIOD_IN_DAY } from '../../cm-lib/constants'\nimport { format, parseISO, addDays, differenceInCalendarDays } from 'date-fns';\nimport Common from './common'\nimport { getDayChart } from '../../cm-lib/QiMen'\n\n\nconst search = (chart, palace) => {\n  const now = new Date();\n  const searchEndDate = addDays(now, SEARCH_PERIOD_IN_DAY);\n  const diff = differenceInCalendarDays(searchEndDate, now);\n  return [...Array(diff).keys()].map(d => {\n      const compareDate = addDays(now, d);\n      const key = format(compareDate, DEAULT_DATE_FORMAT);\n      return [getDayChart(compareDate.getFullYear(), compareDate.getMonth() + 1, compareDate.getDate())]\n      .reduce((a, e) => {\n          const formationIndex = chart.findIndex(o => e.structure === o.structure && e.pillar === o.hour)\n          \n          if(formationIndex > -1 && palace.includes(DIRECTION[chart[formationIndex].e.i])) {\n\n              return a.concat([{\n                  ...e,\n                  f: { ...chart[formationIndex].e, d: DIRECTION[formationIndex] }\n              }])\n          }\n          return a;\n      }\n      , [])\n      .map(ee =>  {\n          return { ...ee, date: `${key}T00:00:00`};\n      })\n  })\n  .reduce((a, n) => a.concat(n), [])\n}\n\nconst handleSearch = (searchFormation, palace) => {\n  \n\n  const found = Ju.filter(v => v.chart.find(g => g.f && g.f.indexOf(searchFormation) > -1 ))\n  .map(e => ({ structure: e.structure, hour: e.hour, e: { ...e.chart.find(e => e.f === searchFormation), i: e.chart.findIndex(e => e.f === searchFormation) }}))\n  const result = search(found, palace);\n  const display = (v, square) => `${format(parseISO(`${v}`), DATETIME_FORMAT)} ${square.heaven} ${square.star} ${square.door} ${square.god} ${square.earth} ${DIRECTION[square.i]}`\n  return result.map((v, i) => ({ ...v, display: display(v.date, v.f)}))\n}\n\nconst getChart = (dateObject, updateChart) => {\n\n  const y = format(dateObject, 'yyyy')\n  const m = format(dateObject, 'M')\n  const d = format(dateObject, 'd')\n  const ch = getDayChart(y, m, d);\n  const foundChart = Ju.find(e => e.structure === ch.structure && e.hour === ch.pillar);\n  updateChart(foundChart);\n}   \n\nconst Home = () => {\n\n  return <Layout><Common\n    heading=\"Qi Men Dun Jia Day Chart\"\n    handleSearch={handleSearch} \n    onDateChanged={getChart}\n  /></Layout>\n}\n\nexport default Home\n"],"sourceRoot":""}